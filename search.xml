<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo笔记</title>
    <url>/2023/11/12/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Butterfly练手开始"><a href="#Butterfly练手开始" class="headerlink" title="Butterfly练手开始"></a>Butterfly练手开始</h2><h3 id="1-flink测试"><a href="#1-flink测试" class="headerlink" title="1.flink测试"></a>1.flink测试</h3><div class="flink"><div class="flink-name">网站分享</div><div class="flink-desc">每天看看热门</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://www.bilibili.com/" title="B站" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://picture.gptkong.com/20240623/00359179d42155465fb0f79c3e4e0f7773.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="B站" />
              </div>
              <div class="flink-item-name">B站</div> 
              <div class="flink-item-desc" title="今日热门,今日刷">今日热门,今日刷</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.douyin.com/" title="抖音" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://picture.gptkong.com/20240623/003781588bc3794a058a2209d1ada63a0a.jpg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="抖音" />
              </div>
              <div class="flink-item-name">抖音</div> 
              <div class="flink-item-desc" title="每天看看沙雕">每天看看沙雕</div>
            </a>
          </div></div><div class="flink-name">功能网站</div><div class="flink-desc">有空看看呗</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://www.gptkong.com/tools/image_to_link" title="图像转网络链接" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://picture.gptkong.com/20240618/16527145e5c86d419092d0637b2069c668.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="图像转网络链接" />
              </div>
              <div class="flink-item-name">图像转网络链接</div> 
              <div class="flink-item-desc" title="在线把本地图片转成网络图片">在线把本地图片转成网络图片</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.weibo.com/" title="微博" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="微博" />
              </div>
              <div class="flink-item-name">微博</div> 
              <div class="flink-item-desc" title="女厕所">女厕所</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://twitter.com/" title="Twitter" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />
              </div>
              <div class="flink-item-name">Twitter</div> 
              <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>
            </a>
          </div></div></div>

<h3 id="详细文档参考"><a href="#详细文档参考" class="headerlink" title="详细文档参考"></a>详细文档参考</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://butterfly.zhheo.com/create.html</span><br></pre></td></tr></table></figure>

<p>非常良心</p>
<h3 id="文字添加颜色"><a href="#文字添加颜色" class="headerlink" title="文字添加颜色"></a>文字添加颜色</h3><p>使用&lt;注释font color&#x3D;十六进制颜色代码&gt;  和     &lt;&#x2F;font注释&gt; 把要改颜色的字体夹住（copy记得把注释删掉）</p>
<p><font color=#00ffff size=3>浅蓝色好看捏</font></p>
<p><font color=#aa8aaa size=7>还可以空格+size&#x3D;1&#x2F;2&#x2F;3&#x2F;……调整大小</font></p>
<h3 id="后续慢慢修改主题文件配置即可添加或者删除功能"><a href="#后续慢慢修改主题文件配置即可添加或者删除功能" class="headerlink" title="后续慢慢修改主题文件配置即可添加或者删除功能"></a>后续慢慢修改主题文件配置即可添加或者删除功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">推荐上面的详细文档参考</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C#笔记</title>
    <url>/2024/06/15/C-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="C-基本语法-上世纪國男"><a href="#C-基本语法-上世纪國男" class="headerlink" title="C#基本语法-上世纪國男"></a>C#基本语法-上世纪國男</h2><p>笔记</p>
<h2 id="基本的代码结构"><a href="#基本的代码结构" class="headerlink" title="基本的代码结构"></a>基本的代码结构</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;<span class="comment">//using 引入命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C# 中用于组织和声明一组相关的类、结构体、接口等的容器。命名空间有助于组织代码并避免命名冲突。</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 主函数。当程序启动时，将首先执行 Main 方法。</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">         <span class="comment">//书写我们的代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="基本的输出语句"><a href="#基本的输出语句" class="headerlink" title="基本的输出语句"></a>基本的输出语句</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//单行注释Crtl+K+C 取消Crtl+K+U</span></span><br><span class="line">            <span class="comment">//多行注释 /* */   推荐！！！</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//WriteLine,输出以后自动换行；</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;Hello, World!&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//Write,输出以后不会换行</span></span><br><span class="line">            <span class="comment">// Console.Write(&quot;Hello, World!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>在 C# 中有一些特定的字符，当它们的前面带有反斜杠时有特殊的意义，可用于表示换行符（\n）或制表符 tab（\t）。在这里，列出一些转义序列码：</p>
<table>
<thead>
<tr>
<th align="left">转义序列</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="left">\ 字符</td>
</tr>
<tr>
<td align="left">&#39;</td>
<td align="left">‘ 字符</td>
</tr>
<tr>
<td align="left">&quot;</td>
<td align="left">“ 字符</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">? 字符</td>
</tr>
<tr>
<td align="left">\a</td>
<td align="left">Alert 或 bell</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">退格键（Backspace）</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页符（Form feed）</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行符（Newline）</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">水平制表符 tab</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表符 tab</td>
</tr>
<tr>
<td align="left">\ooo</td>
<td align="left">一到三位的八进制数</td>
</tr>
<tr>
<td align="left">\xhh . . .</td>
<td align="left">一个或多个数字的十六进制数</td>
</tr>
</tbody></table>
<p>列如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\&#x27;hello \n  \\word!\&#x27;&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>byte b &#x3D; 255;</td>
<td>8 位无符号整数(0-255)</td>
</tr>
<tr>
<td>sbyte</td>
<td>sbyte sb &#x3D; -128;</td>
<td>8 位有符号整数(-255-255)</td>
</tr>
<tr>
<td>short</td>
<td>short s &#x3D; 32767;</td>
<td>16 位有符号整数</td>
</tr>
<tr>
<td>ushort</td>
<td>ushort us &#x3D; 65535;</td>
<td>16 位无符号整数</td>
</tr>
<tr>
<td>int</td>
<td>int i &#x3D; 42;</td>
<td>32 位有符号整数</td>
</tr>
<tr>
<td>uint</td>
<td>uint ui &#x3D; 123;</td>
<td>32 位无符号整数</td>
</tr>
<tr>
<td>long</td>
<td>long l &#x3D; 123456;</td>
<td>64 位有符号整数</td>
</tr>
<tr>
<td>ulong</td>
<td>ulong ul &#x3D; 123456;</td>
<td>64 位无符号整数</td>
</tr>
<tr>
<td>float</td>
<td>float f &#x3D; 3.14f;</td>
<td>32 位浮点数（精确到7位小数）</td>
</tr>
<tr>
<td>double</td>
<td>double d &#x3D; 3.14;</td>
<td>64 位浮点数（精确到16位小数）</td>
</tr>
<tr>
<td>decimal</td>
<td>decimal dec &#x3D; 123.456m;</td>
<td>128 位高精度小数（精确到28位小数）</td>
</tr>
<tr>
<td>char</td>
<td>char c &#x3D; ‘A’;</td>
<td>16 位 Unicode 字符</td>
</tr>
<tr>
<td>bool</td>
<td>bool flag &#x3D; true;</td>
<td>表示真或假</td>
</tr>
<tr>
<td>string</td>
<td>string str &#x3D; “Hello”;</td>
<td>表示文本字符串</td>
</tr>
<tr>
<td>DateTime</td>
<td>DateTime dt &#x3D; DateTime.Now;</td>
<td>表示日期和时间</td>
</tr>
</tbody></table>
<h2 id="变量和变量赋值"><a href="#变量和变量赋值" class="headerlink" title="变量和变量赋值"></a>变量和变量赋值</h2><p><u>在C#中，变量是用来存储和表示数据的标识符，是程序中的基本元素之一。</u>变量在程序执行过程中可以被赋予不同的值，并且这些值可以是不同的数据类型，如整数、浮点数、字符、布尔值等。</p>
<p>定义一个变量</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a;</span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">float</span> b;</span><br><span class="line">b=<span class="number">1.2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> c=<span class="number">12.33</span></span><br><span class="line"><span class="built_in">string</span> str=<span class="string">&quot;哈哈哈哈&quot;</span></span><br></pre></td></tr></table></figure>

<p>变量使用注意：①先声明在使用，②先初始化在使用</p>
<p>定义姓名（name），年龄(age)，性别(sex)，身高(height)，体重(weight)，婚否(isMarry),格言（motto）等变量，并在控制台打印输出</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication4</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如何定义一个变量</span></span><br><span class="line">            <span class="comment">//数据类型 变量名</span></span><br><span class="line">            <span class="built_in">string</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line">            <span class="built_in">char</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">            <span class="built_in">double</span> height = <span class="number">178.9</span>;</span><br><span class="line">            <span class="built_in">double</span> weight = <span class="number">71</span>;</span><br><span class="line">            <span class="built_in">bool</span> isMarry = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">string</span> motto = <span class="string">&quot;勇敢的人先享受世界&quot;</span>;</span><br><span class="line">            Console.WriteLine(name);</span><br><span class="line">            Console.WriteLine(Name);</span><br><span class="line">            Console.WriteLine(age);</span><br><span class="line">            Console.WriteLine(sex);</span><br><span class="line">            Console.WriteLine(height);</span><br><span class="line">            Console.WriteLine(weight);</span><br><span class="line">            Console.WriteLine(isMarry);</span><br><span class="line">            Console.WriteLine(motto);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="变量的输出方式"><a href="#变量的输出方式" class="headerlink" title="变量的输出方式"></a>变量的输出方式</h2><p>1.＋号拼接（只能用于字符串与字符串或者字符串和其它类型）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> myNumber = <span class="number">42</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;变量的值是：&quot;</span> + myNumber);</span><br></pre></td></tr></table></figure>

<p>2.占位符输出</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;我叫&#123;0&#125;，今年&#123;1&#125;岁&quot;</span>,name,age);</span><br></pre></td></tr></table></figure>

<p>3.$插值输出</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;我叫<span class="subst">&#123;name&#125;</span>，今年<span class="subst">&#123;age&#125;</span>岁&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><u>常量是固定值，程序执行期间不会改变。</u>常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符串常量，还有枚举常量。常量可以被当作常规的变量，只是它们的值在定义后不能被修改。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//const 数据类型 常量名称 = 常量值</span></span><br><span class="line">cosnt <span class="built_in">int</span> a = <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：①常量必须在声明时初始化，并且在指定值后就不能修改，②常量的值不能用一个变量的值去初始化</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下编译不通过</span></span><br><span class="line"><span class="built_in">int</span> i =<span class="number">64</span>;</span><br><span class="line">cosnt <span class="built_in">int</span> a = i;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h2><p>在C#中，变量的命名应该遵循一定的规范，以提高代码的可读性和维护性。以下是一些常见的C#变量命名规范：</p>
<p>1.**驼峰命名法 (Camel Case)**：首字母小写，后续每个单词的首字母大写。例如：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> myName;</span><br><span class="line"><span class="built_in">int</span> myAge;</span><br><span class="line"><span class="built_in">int</span> MYAGE;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.变量名必须以字母或者下划线开头；</p>
<p>3.变量名只能由字母、数字和下划线组成，不能包含空格、标点符号、等其它符号；</p>
<p>4.变量名不能与c#中的关键字相同，例如int 、float、double；</p>
<p>5.变量名区分大小写。</p>
<h2 id="表达式和常用运算符"><a href="#表达式和常用运算符" class="headerlink" title="表达式和常用运算符"></a>表达式和常用运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th>算术运算符</th>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>int result &#x3D; 5 + 3;</td>
<td>加法运算符，将两个值相加</td>
</tr>
<tr>
<td>-</td>
<td>int result &#x3D; 5 - 3;</td>
<td>减法运算符，将右侧值从左侧值中减去</td>
</tr>
<tr>
<td>*</td>
<td>int result &#x3D; 5 * 3;</td>
<td>乘法运算符，将两个值相乘</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>int result &#x3D; 6 &#x2F; 3;</td>
<td>除法运算符，将左侧值除以右侧值</td>
</tr>
<tr>
<td>%</td>
<td>int result &#x3D; 7 % 3;</td>
<td>取余运算符，返回除法的余数</td>
</tr>
<tr>
<td>++</td>
<td>int x &#x3D; 5; x++;</td>
<td>递增运算符，将变量的值增加1</td>
</tr>
<tr>
<td>–</td>
<td>int y &#x3D; 8; y–;</td>
<td>递减运算符，将变量的值减少1</td>
</tr>
</tbody></table>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table>
<thead>
<tr>
<th>比较运算符</th>
<th align="left">示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td align="left">int a &#x3D; 5; int b &#x3D; 5;bool isEqual &#x3D; (a &#x3D;&#x3D; b);</td>
<td>相等运算符，检查两个值是否相等</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td align="left">int a &#x3D; 5; int b &#x3D; 10;bool isNotEqual &#x3D; (a !&#x3D; b);</td>
<td>不等运算符，检查两个值是否不相等</td>
</tr>
<tr>
<td>&gt;</td>
<td align="left">int a &#x3D; 5; int b &#x3D; 3;bool isGreater &#x3D; (a &gt; b);</td>
<td>大于运算符，检查左侧值是否大于右侧值</td>
</tr>
<tr>
<td>&lt;</td>
<td align="left">int a &#x3D; 5; int b &#x3D; 10;bool isLess &#x3D; (a &lt; b);</td>
<td>小于运算符，检查左侧值是否小于右侧值</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td align="left">int a &#x3D; 5; int b &#x3D; 5;bool isGreaterOrEqual &#x3D;(a &gt;&#x3D; b);</td>
<td>大于等于运算符，检查左侧值是否大于或等于右侧</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td align="left">int a &#x3D; 5; int b &#x3D; 10;bool isLessOrEqual &#x3D;(a &lt;&#x3D; b);</td>
<td>小于等于运算符，检查左侧值是否小于或等于右侧</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&amp;&amp;</code></td>
<td><code>bool result = (true &amp;&amp; false);</code></td>
<td>逻辑与运算符，当两个条件都为真时返回真</td>
</tr>
<tr>
<td>&#96;</td>
<td></td>
<td>&#96;</td>
</tr>
<tr>
<td><code>!</code></td>
<td><code>bool result = !true;</code></td>
<td>逻辑非运算符，用于取反，将真变为假，将假变为真</td>
</tr>
</tbody></table>
<h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>三目运算符，也称为条件运算符，是一种在单行中使用条件进行条件判断的运算符：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;条件表达式&gt; ? &lt;表达式1&gt; : &lt;表达式2&gt;</span></span><br><span class="line"><span class="built_in">int</span> a =<span class="number">3</span>;</span><br><span class="line"><span class="built_in">int</span> b =<span class="number">2</span>;</span><br><span class="line"><span class="built_in">string</span> isMax=a&gt;b?<span class="string">&quot;a大于b&quot;</span>:<span class="string">&quot;a小于b&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="快捷运算符"><a href="#快捷运算符" class="headerlink" title="快捷运算符"></a>快捷运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>+=</code></td>
<td><code>a += b;</code></td>
<td>相当于 <code>a = a + b;</code>，将 <code>a</code> 的值与 <code>b</code> 相加并将结果赋给 <code>a</code>。</td>
</tr>
<tr>
<td><code>-=</code></td>
<td><code>a -= b;</code></td>
<td>相当于 <code>a = a - b;</code>，将 <code>a</code> 的值减去 <code>b</code> 并将结果赋给 <code>a</code>。</td>
</tr>
<tr>
<td><code>*=</code></td>
<td><code>a *= b;</code></td>
<td>相当于 <code>a = a * b;</code>，将 <code>a</code> 的值乘以 <code>b</code> 并将结果赋给 <code>a</code>。</td>
</tr>
<tr>
<td><code>/=</code></td>
<td><code>a /= b;</code></td>
<td>相当于 <code>a = a / b;</code>，将 <code>a</code> 的值除以 <code>b</code> 并将结果赋给 <code>a</code>。</td>
</tr>
<tr>
<td><code>%=</code></td>
<td><code>a %= b;</code></td>
<td>相当于 <code>a = a % b;</code>，将 <code>a</code> 的值取模 <code>b</code> 并将结果赋给 <code>a</code>。</td>
</tr>
<tr>
<td><code>++</code></td>
<td><code>a++;</code></td>
<td>自增运算符，相当于 <code>a = a + 1;</code>，将 <code>a</code> 的值增加1。</td>
</tr>
<tr>
<td><code>--</code></td>
<td><code>a--;</code></td>
<td>自减运算符，相当于 <code>a = a - 1;</code>，将 <code>a</code> 的值减少1。</td>
</tr>
</tbody></table>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>()</code></td>
<td>圆括号（最高优先级）</td>
</tr>
<tr>
<td>2</td>
<td><code>++</code>, <code>--</code>, <code>!</code></td>
<td>递增、递减、逻辑非</td>
</tr>
<tr>
<td>3</td>
<td><code>*</code>, <code>/</code>, <code>%</code></td>
<td>乘法、除法、取余</td>
</tr>
<tr>
<td>4</td>
<td><code>+</code>, <code>-</code></td>
<td>加法、减法</td>
</tr>
<tr>
<td>5</td>
<td><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>is</code>, <code>as</code></td>
<td>关系和类型检查</td>
</tr>
<tr>
<td>6</td>
<td><code>==</code>, <code>!=</code></td>
<td>相等和不等比较</td>
</tr>
<tr>
<td>7</td>
<td><code>&amp;</code></td>
<td>位与</td>
</tr>
<tr>
<td>8</td>
<td><code>^</code></td>
<td>位异或</td>
</tr>
<tr>
<td>9</td>
<td>&#96;</td>
<td>&#96;</td>
</tr>
<tr>
<td>10</td>
<td><code>&amp;&amp;</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td>11</td>
<td>&#96;</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td><code>??</code></td>
<td>空合并运算符</td>
</tr>
<tr>
<td>13</td>
<td><code>? :</code></td>
<td>条件运算符</td>
</tr>
<tr>
<td>14</td>
<td><code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></td>
<td>赋值和复合赋值</td>
</tr>
<tr>
<td>15</td>
<td><code>,</code></td>
<td>逗号运算符（最低优先级）</td>
</tr>
</tbody></table>
<h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> userName = Console.ReadLine();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意的是，<code>Console.ReadLine()</code> 返回的是一个字符串，如果你需要将用户输入转换为其他类型（例如整数或浮点数）</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用int.Parse()、float.Parse</span></span><br><span class="line"><span class="built_in">int</span> num =<span class="built_in">int</span>.Parse(Console.ReadLine())<span class="comment">//字符串转整数</span></span><br><span class="line"><span class="built_in">float</span> num=<span class="built_in">float</span>.Parse(Console.ReadLine())<span class="comment">//字符串转浮点数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><p><code>if</code> 和 <code>else</code> 是在编程中用于实现条件分支的控制结构。它们允许根据条件的真假执行不同的代码块。</p>
<h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a><code>if</code> 语句</h3><p><code>if</code> 语句用于执行一组语句，如果指定的条件为真（<code>true</code>）。其基本语法如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在条件condition为真时执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;x 大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><p>if-else&#96; 语句用于执行两组不同的语句，根据指定的条件是真还是假。其基本语法如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在条件condition为真时执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在条件为假时执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;x 大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;x 不大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="if-else-else-if-语句"><a href="#if-else-else-if-语句" class="headerlink" title="if-else else-if 语句"></a><code>if-else else-if</code> 语句</h3><p><code>if-else if-else</code> 语句用于执行多个条件分支，每个条件都被逐一检查。其基本语法如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">if</span> (condition1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在条件1为真时执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在条件2为真时执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在所有条件都为假时执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;x 大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;x 等于 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;x 小于 5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication12</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> x = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// string str = x % 2 == 0 ? &quot;偶数&quot; : &quot;奇数&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;x&#125;</span>是偶数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;x&#125;</span>是奇数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="switch…case"><a href="#switch…case" class="headerlink" title="switch…case"></a><code>switch</code>…case</h3><p> switch语句是一种用于实现多分支选择的控制结构。它比 <code>if-else</code> 语句更适用于对同一个变量进行多个值的比较。<code>switch</code> 语句的基本语法如下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//expression 是需要进行比较的表达式或变量。</span></span><br><span class="line"><span class="comment">//case 后面跟着一个常量或常量表达式，表示某个值。</span></span><br><span class="line"><span class="comment">//break 语句用于退出 switch 语句，防止继续执行下一个 case 或 default。</span></span><br><span class="line"><span class="keyword">switch</span> (expression)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 当 expression 等于 value1 时执行的代码块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 当 expression 等于 value2 时执行的代码块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 可以有多个 case</span></span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        <span class="comment">// 如果上述所有 case 都不满足时执行的代码块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单的示例：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.Write(<span class="string">&quot;输入一个数字（1到3）: &quot;</span>);</span><br><span class="line"><span class="built_in">int</span> number = <span class="built_in">int</span>.Parse(Console.ReadLine());</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (number)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你输入的是数字 1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你输入的是数字 2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你输入的是数字 3&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;输入无效&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while…循环"><a href="#while…循环" class="headerlink" title="while…循环"></a>while…循环</h3><p><code>while</code> 循环是 一种迭代控制结构，用于重复执行一段代码块，直到指定的条件不再满足为止：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">    <span class="comment">// 在每次循环迭代时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>condition</code> 是一个条件表达式，它决定了是否继续执行循环体内的代码块。只要条件为 true，循环就会继续执行。</li>
<li>循环体代码是被重复执行的代码块。当条件为 true 时，循环体会被执行。如果条件为 false，循环体内的代码将不会被执行。</li>
</ul>
<p><code>while</code> 循环的工作原理是，首先评估条件。如果条件为 true，则执行循环体内的代码，并再次评估条件。这个过程会一直重复，直到条件为 false，此时循环停止，控制流跳出循环，继续执行循环之后的代码。</p>
<p>下面是一个简单的示例，演示了 <code>while</code> 循环的使用：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;当前值为：<span class="subst">&#123;i&#125;</span>&quot;</span>);</span><br><span class="line">    i++; <span class="comment">// 更新循环变量，防止无限循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>while</code> 循环将在 <code>i</code> 的值小于 5 时重复执行。每次循环迭代时，会打印当前值，然后递增 <code>i</code> 的值。当 <code>i</code> 的值达到 5 时，条件不再满足，循环停止。</p>
<p>需要注意的是，如果循环的条件始终为 true，就会造成无限循环（死循环），导致程序永远无法结束。因此，在使用 <code>while</code> 循环时，确保循环条件最终会变为 false，以避免无限循环的发生。</p>
<p>练习</p>
<p>1.提示用户输入正整数n，输出1+2+3+4…+n的和。</p>
<p>2.输出0-100的偶数。</p>
<p>3.提示用户输入两个数n1,n2，输出这n1-n2两个数之间(包括n1和n2)的所有偶数。</p>
<p>4.假设一只boss血量为100，主角每次攻击－5血量，当血量低于0时，提示boss被击败。</p>
<h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>&#96;&#96;do…while<code>循环与</code>while<code> 循环类似，但它在评估条件之前执行循环体内的代码。这意味着，无论条件是否为真，</code>do…while&#96; 循环至少会执行一次循环体内的代码。</p>
<p><code>do...while</code> 循环的基本语法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">    <span class="comment">// 在每次循环迭代时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (condition);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>循环体代码是被重复执行的代码块，它会在条件评估之前至少执行一次。</li>
<li><code>condition</code> 是一个布尔表达式，它决定了是否继续执行循环。如果条件为 true，则继续执行循环。如果条件为 false，则跳出循环。</li>
</ul>
<p><code>do...while</code> 循环首先执行循环体内的代码，然后再评估条件。如果条件为 true，则继续执行循环，否则循环终止。</p>
<p>以下是一个简单的示例，演示了 <code>do...while</code> 循环的使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;当前值为：<span class="subst">&#123;i&#125;</span>&quot;</span>);</span><br><span class="line">    i++; <span class="comment">// 更新循环变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中，无论条件是否为 true，循环都会至少执行一次。每次循环迭代时，会打印当前值，然后递增 <code>i</code> 的值。当 <code>i</code> 的值达到 5 时，条件不再满足，循环停止。</p>
<p>与 <code>while</code> 循环相比，<code>do...while</code> 循环在某些情况下更适合用于确保循环体内的代码至少执行一次，因为它首先执行代码，然后再检查条件。</p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><code>for</code> 循环是 C# 中最常用的迭代控制结构之一，它允许你按照指定的条件重复执行一段代码块。<code>for</code> 循环通常用于在已知循环次数的情况下执行循环，其基本语法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; iteration)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">    <span class="comment">// 在每次循环迭代时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>initialization</code>：在循环开始前执行一次，用于初始化循环变量。通常是一个赋值表达式，用于初始化循环计数器。</li>
<li><code>condition</code>：在每次循环迭代之前检查的条件。如果条件为 true，则继续执行循环；如果条件为 false，则跳出循环。</li>
<li><code>iteration</code>：在每次循环迭代之后执行的代码。通常用于更新循环变量的值。</li>
</ul>
<p><code>for</code> 循环的工作流程如下：</p>
<ol>
<li>执行初始化表达式（<code>initialization</code>）。</li>
<li>检查循环条件（<code>condition</code>）。如果条件为 false，则退出循环。</li>
<li>执行循环体内的代码。</li>
<li>执行迭代表达式（<code>iteration</code>）。</li>
<li>返回步骤 2，继续下一次迭代，直到循环条件为 false。</li>
</ol>
<p>以下是一个简单的示例，演示了 <code>for</code> 循环的使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;当前值为：<span class="subst">&#123;i&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>for</code> 循环将在 <code>i</code> 的值从 0 递增到 4 的过程中重复执行循环体内的代码。在每次迭代中，当前值都会被打印出来。</p>
<p><code>for</code> 循环通常用于在已知循环次数的情况下执行循环，例如遍历数组或执行一定次数的操作。因其简洁和明确的语法，<code>for</code> 循环在实际开发中被广泛使用。</p>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>变量作用域指的是变量在程序中可访问的范围。在 C# 中，变量的作用域可以根据声明的位置和所在代码块来确定。</p>
<p>1.局部作用域</p>
<p>大多数变量都是在方法内部或者代码块内部声明的。这些变量的作用域仅限于声明它们的代码块内部。</p>
<p>2.全局作用作用域</p>
<h3 id="continue与break的区别"><a href="#continue与break的区别" class="headerlink" title="continue与break的区别"></a>continue与break的区别</h3><p>在 C# 中，<code>continue</code> 和 <code>break</code> 是两个用于控制循环行为的关键字。</p>
<ol>
<li>break 关键字：</li>
</ol>
<ul>
<li><code>break</code> 关键字用于在循环内部中断循环的执行，无论循环条件是否已经满足。一旦 <code>break</code> 被执行，循环将立即终止，并且程序流将跳出循环体，继续执行循环后的代码。</li>
</ul>
<p>下面是一个示例，演示了 <code>break</code> 的用法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 当 i 等于 5 时跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个例子中，一旦 <code>i</code> 的值等于 5，<code>break</code> 语句将被执行，导致循环立即终止。因此，循环只会输出 0 到 5 的数字。</p>
<ol start="2">
<li>continue 关键字：</li>
</ol>
<ul>
<li><code>continue</code> 关键字用于终止当前循环的迭代，并立即开始下一次迭代。当 <code>continue</code> 被执行时，程序流将跳过当前迭代的剩余代码，直接进入下一次循环迭代。</li>
</ul>
<p>下面是一个示例，演示了 <code>continue</code> 的用法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 如果 i 是偶数，跳过本次循环的剩余代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个例子中，当 <code>i</code> 是偶数时，<code>continue</code> 将被执行，导致循环直接跳过输出语句，进入下一次迭代。因此，循环将只输出奇数。</p>
<p><code>break</code> 和 <code>continue</code> 关键字是控制循环流程的有用工具。它们可以帮助我们在循环中实现特定的逻辑或行为，从而使代码更加灵活和可控。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在 C# 中，数组（Array）是一种用于存储相同类型数据元素的集合。它是一个连续的内存块，每个元素都可以通过索引访问。</p>
<h3 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _003_数组</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//dataType[] arrayName;</span></span><br><span class="line">            <span class="comment">//dataType是数据类型;</span></span><br><span class="line">            <span class="comment">//arrayName是数组名;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式1</span></span><br><span class="line">            <span class="built_in">int</span>[] arr1= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">            <span class="comment">//数组下标   0  1  2   3  4  5  6  </span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式2</span></span><br><span class="line">            <span class="built_in">int</span>[] arr2;</span><br><span class="line">            arr2=<span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式3</span></span><br><span class="line">            <span class="built_in">int</span>[] arr3;</span><br><span class="line">            arr3 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">7</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式4</span></span><br><span class="line">            <span class="built_in">int</span>[] arr4;</span><br><span class="line">            arr4 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">7</span>]; <span class="comment">//默认值为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _004_数组遍历</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式1</span></span><br><span class="line">            <span class="comment">//for (int i = 0; i &lt; arr.Length; i++)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Console.Write(arr[i]+&quot; &quot;);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式2</span></span><br><span class="line">            <span class="comment">//int i = 0;</span></span><br><span class="line">            <span class="comment">//while (i&lt;arr.Length)</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//     Console.Write(arr[i]+&quot; &quot;);</span></span><br><span class="line">            <span class="comment">//    i++;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式3</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> item <span class="keyword">in</span> arr)</span><br><span class="line">            &#123;</span><br><span class="line">                 Console.Write(item+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组常用的方法"><a href="#数组常用的方法" class="headerlink" title="数组常用的方法"></a>数组常用的方法</h3><p>在 C# 中，数组是一个非常有用的数据结构，它提供了许多方法来对数组进行操作和处理。以下是一些数组中常用的方法：</p>
<h4 id="1-Length-属性："><a href="#1-Length-属性：" class="headerlink" title="1. Length 属性："></a>1. Length 属性：</h4><p><code>Length</code> 属性用于获取数组的长度，即数组中元素的个数。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> length = numbers.Length; <span class="comment">// length 的值为 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-IndexOf-方法："><a href="#2-IndexOf-方法：" class="headerlink" title="2. IndexOf 方法："></a>2. IndexOf 方法：</h4><p><code>IndexOf</code> 方法用于查找指定元素在数组中第一次出现的索引。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> index = Array.IndexOf(numbers, <span class="number">3</span>); <span class="comment">// index 的值为 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-Copy-方法："><a href="#3-Copy-方法：" class="headerlink" title="3. Copy 方法："></a>3. Copy 方法：</h4><p><code>Copy</code> 方法用于复制数组的内容到一个新的数组中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] source = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] destination = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">Array.Copy(source, destination, source.Length);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-Sort-方法："><a href="#4-Sort-方法：" class="headerlink" title="4. Sort 方法："></a>4. Sort 方法：</h4><p><code>Sort</code> 方法用于对数组进行排序。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>&#125;;</span><br><span class="line">Array.Sort(numbers); <span class="comment">// numbers 变为 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-Resize-方法："><a href="#5-Resize-方法：" class="headerlink" title="5. Resize 方法："></a>5. Resize 方法：</h4><p><code>Resize</code> 方法用于调整数组的大小。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">Array.Resize(<span class="keyword">ref</span> numbers, <span class="number">10</span>); <span class="comment">// numbers 的大小变为 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-Clear-方法："><a href="#6-Clear-方法：" class="headerlink" title="6. Clear 方法："></a>6. Clear 方法：</h4><p><code>Clear</code> 方法用于清除数组的所有元素，将其设置为默认值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">Array.Clear(numbers, <span class="number">0</span>, numbers.Length); <span class="comment">// 将 numbers 数组的所有元素清零</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-Reverse-方法："><a href="#7-Reverse-方法：" class="headerlink" title="7. Reverse 方法："></a>7. Reverse 方法：</h4><p><code>Reverse</code> 方法用于反转数组中元素的顺序。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">Array.Reverse(numbers); <span class="comment">// numbers 变为 &#123;5, 4, 3, 2, 1&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="C-中的函数（方法）"><a href="#C-中的函数（方法）" class="headerlink" title="C#中的函数（方法）"></a>C#中的函数（方法）</h2><h3 id="函数的声明与调用"><a href="#函数的声明与调用" class="headerlink" title="函数的声明与调用"></a>函数的声明与调用</h3><p>在 C# 中，方法是一段可重复调用的代码块，它用于执行特定的任务或操作。方法有自己的名称，并且可以接受参数以及返回值。下面是关于 C# 中方法的一些重要概念和特性：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">FX</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//函数调用</span></span><br><span class="line">             <span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  &lt;访问修饰符&gt; &lt;返回类型&gt; &lt;方法名&gt;(参数列表)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//     方法体</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">5</span> + <span class="number">5</span>;</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>访问修饰符</strong>：指定方法的访问级别，可以是 <code>public</code>、<code>private</code>、<code>protected</code> 或 <code>internal</code> 等。</li>
<li><strong>返回类型</strong>：指定方法返回的数据类型，如果方法不返回任何值，则使用 <code>void</code>。</li>
<li><strong>方法名</strong>：方法的名称，用于调用方法。</li>
<li><strong>参数列表</strong>：指定方法接受的参数，可以包含零个或多个参数。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _006_函数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//函数调用</span></span><br><span class="line">            <span class="comment">//5和5为实参</span></span><br><span class="line">            <span class="built_in">int</span> sum= <span class="keyword">add</span>(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  &lt;访问修饰符&gt; &lt;返回类型&gt; &lt;方法名&gt;(参数列表)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//     方法体</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//x和y 为形参</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> x,<span class="built_in">int</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = x + y;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _006_函数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//函数调用</span></span><br><span class="line">            <span class="comment">//5和5为实参</span></span><br><span class="line">            <span class="built_in">int</span> result = <span class="keyword">add</span>(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">            <span class="built_in">double</span> result1 = <span class="keyword">add</span>(<span class="number">5.5</span>, <span class="number">4.5</span>);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.WriteLine(result1);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//函数名相同，参数不同就为函数的重载</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = x + y;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">add</span>(<span class="params"><span class="built_in">double</span> x, <span class="built_in">double</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> sum = x + y;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h3><p>函数的递归是指在函数的定义中调用函数本身的过程。递归是一种重要的编程技巧，它可以简化问题的解决方案，并使代码更加清晰和易于理解。在 C# 中，函数可以是递归的，允许函数调用自身，但需要小心处理递归调用的终止条件，以免导致无限循环。</p>
<p>递归的注意事项：</p>
<ul>
<li><strong>终止条件</strong>：递归函数必须有明确的终止条件，否则会导致无限递归。</li>
<li><strong>性能问题</strong>：递归可能导致性能问题，因为它需要在每一层递归中保留状态。</li>
<li><strong>栈溢出</strong>：如果递归调用的层数过多，可能导致栈溢出错误。</li>
</ul>
<p>示例：斐波那契数列</p>
<p>斐波那契数列是一个经典的递归示例，它定义如下：斐波那契数列中的每个数字都是前两个数字的和，其中第一个和第二个数字分别为 0 和 1。</p>
<p>数列的前几个数字如下所示：0, 1, 1, 2, 3, 5, 8, 13, 21, …</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _007_函数的递归</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n = <span class="number">10</span>; <span class="comment">// 计算斐波那契数列的第 n 个数字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(CalculateFibonacci(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">CalculateFibonacci</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 基本情况：当 n 为 0 或 1 时，斐波那契数为 n</span></span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 递归情况：计算第 n 个斐波那契数为前两个数的和</span></span><br><span class="line">            <span class="keyword">return</span> CalculateFibonacci(n - <span class="number">1</span>) + CalculateFibonacci(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举（Enum）类型是一种 C# 中的数据类型，用于定义命名的常量集合。枚举类型允许我们定义一组具有逻辑联系的命名常量，以提高代码的可读性和可维护性。在 C# 中，枚举类型通常用于代表一组相关的值。</p>
<h3 id="定义枚举类型："><a href="#定义枚举类型：" class="headerlink" title="定义枚举类型："></a>定义枚举类型：</h3><p>在 C# 中，可以使用 <code>enum</code> 关键字定义枚举类型。以下是枚举类型的基本语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> 枚举名</span><br><span class="line">&#123;</span><br><span class="line">    常量<span class="number">1</span>,</span><br><span class="line">    常量<span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 可以有更多的常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Weekday</span><br><span class="line">&#123;</span><br><span class="line">    Monday,</span><br><span class="line">    Tuesday,</span><br><span class="line">    Wednesday,</span><br><span class="line">    Thursday,</span><br><span class="line">    Friday,</span><br><span class="line">    Saturday,</span><br><span class="line">    Sunday</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用枚举类型："><a href="#使用枚举类型：" class="headerlink" title="使用枚举类型："></a>使用枚举类型：</h3><p>定义了枚举类型之后，我们可以声明变量并赋予枚举常量作为其值。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Weekday today = Weekday.Monday;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在此示例中，<code>today</code> 变量的类型是 <code>Weekday</code> 枚举类型，并且它的值被设为 <code>Monday</code>。</p>
<h3 id="枚举的特性："><a href="#枚举的特性：" class="headerlink" title="枚举的特性："></a>枚举的特性：</h3><ol>
<li><p><strong>默认值</strong>：枚举类型的默认基础类型是整数（int）。第一个枚举常量的默认值是 0，后续常量的值逐次递增。</p>
</li>
<li><p><strong>显式赋值</strong>：我们可以显式地为枚举常量指定值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Weekday</span><br><span class="line">&#123;</span><br><span class="line">    Monday = <span class="number">1</span>,</span><br><span class="line">    Tuesday = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 其他常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>转换</strong>：枚举类型可以与整数类型相互转换。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> day = (<span class="built_in">int</span>)Weekday.Monday; <span class="comment">// day 的值为 1</span></span><br><span class="line">Weekday day = (Weekday)<span class="number">1</span>; <span class="comment">// day 的值为 Monday</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>枚举成员访问</strong>：我们可以通过枚举的名称来访问其成员。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Weekday today = Weekday.Monday;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>和C++中一样，类衍生出对象，水果可以衍生出苹果，</p>
<p>在程序员眼中，现实中的一切事物皆为对象。而面向对象是一种对现实 世界理解和抽象的方法，是计算机编程思想。面向对象的思想是从现实世界中客观存在的事物出发来构造软件系统，并且在系统中尽可能的运用人类的思维方式。</p>
<h3 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a>类的概念</h3><p>类描述了一组有相同特性（属性）和相同行为（方法）的对象<br>类可以定义为数据和方法的集合。<br>类也称为模板，因为它们提供了对象的基本框架。</p>
<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><p>类是描述现实生活中的实体的，实体就是对象！</p>
<h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>如下声明了一个动物类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> _008_面向对象编程</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> heght;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> weight;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> audio;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;我叫<span class="subst">&#123;name&#125;</span>,身高<span class="subst">&#123;heght&#125;</span>cm,体重<span class="subst">&#123;weight&#125;</span>kg,我会<span class="subst">&#123;audio&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h3><p>实例化动物类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> _008_面向对象编程</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//通过new关键字实例化了一个mouse对象</span></span><br><span class="line">            Animal mouse = <span class="keyword">new</span> Animal();</span><br><span class="line">            <span class="comment">//为对象属性赋值</span></span><br><span class="line">            mouse.name = <span class="string">&quot;jerry&quot;</span>;</span><br><span class="line">            mouse.weight = <span class="number">1</span>;</span><br><span class="line">            mouse.heght = <span class="number">10</span>;</span><br><span class="line">            mouse.audio = <span class="string">&quot;吱吱吱&quot;</span>;</span><br><span class="line">            <span class="comment">//调用对象方法</span></span><br><span class="line">            mouse.action();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性：对字段的访问作出一些限定，不允许外界随意访问。</p>
<p>在程序中，使用属性封装字段时，需要将字段访问级别设为private，并通过属性地get和set访问器来对字段进行读写操作，从而保证类内部数据安全。</p>
<p>属性地分类：</p>
<ul>
<li><p>读写属性：同时有get、set访问器的属性。</p>
</li>
<li><p>只读属性：只有get访问器。</p>
</li>
<li><p>只写属性：只有set访问器。</p>
<p><strong>读写属性语法格式如下：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>[数据类型][属性名]&#123;</span><br><span class="line">	<span class="keyword">get</span>&#123;<span class="comment">//返回参数值&#125;</span></span><br><span class="line">	<span class="keyword">set</span>&#123;<span class="comment">//设置隐式参数value给字段赋值&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>只读属性地语法格式如下：</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>[数据类型][属性名]&#123;</span><br><span class="line">	<span class="keyword">get</span>&#123;<span class="comment">//返回参数值&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>只写属性地语法格式如下</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> [数据类型] [属性名] &#123;     </span><br><span class="line">     <span class="keyword">set</span> &#123; <span class="comment">//设置隐式参数value给字段赋值 &#125;   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>类的设计</strong>：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> name = <span class="string">&quot;张三&quot;</span>;	  <span class="comment">//定义私有字段name</span></span><br><span class="line">    	<span class="comment">//只读属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name  &#123;          <span class="comment">//定义公有属性Name封装name</span></span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> age; 		       <span class="comment">//定义私有字段age</span></span><br><span class="line">    	<span class="comment">//读写属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age&#123;                <span class="comment">//定义公有属性Age封装age字段</span></span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123;……&#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">public</span> <span class="built_in">string</span> Gender&#123;         <span class="comment">//定义表示性别的 自动属性</span></span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Introduce</span>()</span>&#123;……&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>访问修饰符：用于限定外界对类和方法的访问权限，可以指定数据和方法的可见性。</p>
<p>访问修饰符分类：public、protected、internal、private。</p>
<p>访问级别：</p>
<ul>
<li>public：最高访问级别，访问不受限制。</li>
<li>protected:保护访问级别，受保护的成员可自身及派生类（子类）访问。</li>
<li>internal：内部访问级别，只有在同一程序集中，内部类型或者成员才能访问。</li>
<li>protected internal：内部保护级别，访问仅限于当前程序集，可由自身及派生类（子类）访问。</li>
<li>private：私有访问，最低访问级别，私有成员只有在声明他们的类和结构中才可访问。</li>
</ul>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法是类的一个特殊成员，他会在类实例化对象时自动调用，为对象开辟内存空间，并对类中的成员进行初始化。</p>
<p>定义构造方法的条件：</p>
<p>1.方法名与类名相同。</p>
<p>2.在方法名的前面没有返回值类型的声明。</p>
<p>3.在方法中不能使用return语句返回一个值。</p>
<p><strong>无参构造方法</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">       <span class="comment">// 下面是Person类的构造方法</span></span><br><span class="line">    	<span class="comment">//方法名与类名相同，没有返回值类型的声明，该构造方法中没有参数，因此为无参构造函数</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span>&#123;</span><br><span class="line">           Console.WriteLine(<span class="string">&quot;无参的构造方法被调用了...&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">           Person p = <span class="keyword">new</span> Person();  <span class="comment">//实例化Person 对象</span></span><br><span class="line">           Console.ReadKey();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>有参构造方法</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">        <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//方法名与类型相同，没有返回值类型的声明，该构造方法中有一个int类型的参数，因此为有参构造方法</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">int</span> a</span>)</span>&#123;</span><br><span class="line">            Age = a;   </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>()</span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;I am &quot;</span> + Age + <span class="string">&quot; years old.!&quot;</span>);&#125;</span><br><span class="line">		&#125;</span><br><span class="line">         ……</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">         Person p = <span class="keyword">new</span> Person(<span class="number">20</span>);    <span class="comment">//实例化 Person 对象</span></span><br><span class="line">         p.Speak();</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 然而并没有什么软用。</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2024/06/15/git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git使用-上世纪國男"><a href="#git使用-上世纪國男" class="headerlink" title="git使用-上世纪國男"></a>git使用-上世纪國男</h1><p>笔记</p>
<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>前往这个网站下载git<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">CNPM Binaries Mirror (npmmirror.com)</a>这是阿里的git镜像网站</p>
<p>双击下载后的 <code>Git-2.40.0-64-bit.exe</code>，开始安装</p>
<p><img src="https://picture.gptkong.com/20240618/1716b9c680bbe14e0a85b91ffc521e477c.png"></p>
<p>最后一个选项不要打勾。</p>
<p>其他全是默认即可。</p>
<h3 id="配置系统变量环境"><a href="#配置系统变量环境" class="headerlink" title="配置系统变量环境"></a>配置系统变量环境</h3><h4 id="1-获取git的安装路径"><a href="#1-获取git的安装路径" class="headerlink" title="1. 获取git的安装路径"></a>1. 获取git的安装路径</h4><p><code>win+r</code> 输入 <code>cmd</code> 打开，输入命令行 <code>where git</code>并回车，复制返回的地址。</p>
<h4 id="2-设置环境变量"><a href="#2-设置环境变量" class="headerlink" title="2. 设置环境变量"></a>2. 设置环境变量</h4><p><strong>我的电脑右键 &#x3D;》属性 &#x3D;》高级系统设置 &#x3D;》系统属性（高级）&#x3D;》 环境变量，进入环境变量对话框。</strong></p>
<p>如果环境变量未正确配置，输入git 命令行会报错，系统将无法正确识别 “git” 命令。</p>
<p>选中 <code>系统变量</code> 里的 <code>Path</code> ，点击编辑。添加-复制刚刚的路径</p>
<p><img src="https://img-blog.csdnimg.cn/60753801cd674afdad940c6390ff6347.png"></p>
<h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><p>安装完 Git 之后，要做的第一件事就是设置用户名和邮件地址。 这很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到每一次提交中，不可更改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email 你的邮箱@qq.com</span><br></pre></td></tr></table></figure>

<h2 id="git原理"><a href="#git原理" class="headerlink" title="git原理"></a>git原理</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png"></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg" alt="img"></p>
<ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li>
</ul>
<h2 id="git创建仓库Git-创建仓库"><a href="#git创建仓库Git-创建仓库" class="headerlink" title="git创建仓库Git 创建仓库"></a>git创建仓库Git 创建仓库</h2><p>你也可以使用一个已经存在的目录作为 Git 仓库。</p>
<hr>
<h3 id="git-init仓库初始化"><a href="#git-init仓库初始化" class="headerlink" title="git init仓库初始化"></a>git init仓库初始化</h3><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p>
<p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>使用当前目录作为 Git 仓库，我们只需使它初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>该命令执行完后会在当前目录生成一个 .git 目录。</p>
<p>使用我们指定目录作为Git仓库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init myrep</span><br></pre></td></tr></table></figure>

<p>初始化后，会在 myrep 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m &#x27;提交说明：初始化项目版本&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="git-clone代码拷贝"><a href="#git-clone代码拷贝" class="headerlink" title="git clone代码拷贝"></a>git clone代码拷贝</h3><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目（类似 <strong>svn checkout</strong>）。</p>
<p>克隆仓库的命令格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;repo&gt; 克隆地址</span><br></pre></td></tr></table></figure>

<p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<ul>
<li>**repo:**Git 仓库。</li>
<li>**directory:**本地目录。</li>
</ul>
<p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：常用方式就是这种，有克隆网址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure>

<p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p>
<p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure>

<p>下表列出了 git 创建仓库的命令：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git init</code></td>
<td align="left">初始化仓库</td>
</tr>
<tr>
<td align="left"><code>git clone</code></td>
<td align="left">拷贝一份远程仓库，也就是下载一个项目。</td>
</tr>
</tbody></table>
<hr>
<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p>
<p>下表列出了有关创建与提交你的项目的快照的命令：</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git add</code></td>
<td align="left">添加文件到暂存区</td>
</tr>
<tr>
<td align="left"><code>git status</code></td>
<td align="left">查看仓库当前的状态，显示有变更的文件。</td>
</tr>
<tr>
<td align="left"><code>git diff</code></td>
<td align="left">比较文件的不同，即暂存区和工作区的差异。</td>
</tr>
<tr>
<td align="left"><code>git commit</code></td>
<td align="left">提交暂存区到本地仓库。</td>
</tr>
<tr>
<td align="left"><code>git reset</code></td>
<td align="left">回退版本。</td>
</tr>
<tr>
<td align="left"><code>git rm</code></td>
<td align="left">将文件从暂存区和工作区中删除。</td>
</tr>
<tr>
<td align="left"><code>git mv</code></td>
<td align="left">移动或重命名工作区文件。</td>
</tr>
<tr>
<td align="left"><code>git checkout</code></td>
<td align="left">分支切换。</td>
</tr>
<tr>
<td align="left"><code>git switch （Git 2.23 版本引入）</code></td>
<td align="left">更清晰地切换分支。</td>
</tr>
<tr>
<td align="left"><code>git restore （Git 2.23 版本引入）</code></td>
<td align="left">恢复或撤销文件的更改。</td>
</tr>
</tbody></table>
<h3 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git log</code></td>
<td align="left">查看历史提交记录</td>
</tr>
<tr>
<td align="left"><code>git blame &lt;file&gt;</code></td>
<td align="left">以列表形式查看指定文件的历史修改记录</td>
</tr>
</tbody></table>
<h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>git remote</code></td>
<td align="left">远程仓库操作</td>
</tr>
<tr>
<td align="left"><code>git fetch</code></td>
<td align="left">从远程获取代码库</td>
</tr>
<tr>
<td align="left"><code>git pull</code></td>
<td align="left">下载远程代码并合并</td>
</tr>
<tr>
<td align="left"><code>git push</code></td>
<td align="left">上传远程代码并合并</td>
</tr>
</tbody></table>
<h2 id="git分支系统"><a href="#git分支系统" class="headerlink" title="git分支系统"></a>git分支系统</h2><p>几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p>
<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。如图所示：</p>
<p><img src="https://static.jyshare.com/images/svg/git-brance.svg"></p>
<p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>有参数时就会根据参数yourbranch创造yourbranch分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch yourbranch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切换到mybranch分支命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout mybranch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>合并分支命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>删除分支命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d yourbranch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>合并完后就可以删除分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d yourbranch</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Git-提交历史"><a href="#Git-提交历史" class="headerlink" title="Git 提交历史"></a>Git 提交历史</h2><p>一般常用两个命令：</p>
<p><strong>git log</strong> - 查看历史提交记录。</p>
<p><strong>git blame <file></strong> - 以列表形式查看指定文件的历史修改记录。</p>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p>
<p><strong>git log</strong> 命令用于查看 Git 仓库中提交历史记录。</p>
<p><strong>git log</strong> 显示了从最新提交到最早提交的所有提交信息，包括提交的哈希值、作者、提交日期和提交消息等。</p>
<p><strong>git log</strong> 命令的基本语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log [选项] [分支名/提交哈希]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-p</code>：显示提交的补丁（具体更改内容）。</li>
<li><code>--oneline</code>：以简洁的一行格式显示提交信息。</li>
<li><code>--graph</code>：以图形化方式显示分支和合并历史。</li>
<li><code>--decorate</code>：显示分支和标签指向的提交。</li>
<li><code>--author=&lt;作者&gt;</code>：只显示特定作者的提交。</li>
<li><code>--since=&lt;时间&gt;</code>：只显示指定时间之后的提交。</li>
<li><code>--until=&lt;时间&gt;</code>：只显示指定时间之前的提交。</li>
<li><code>--grep=&lt;模式&gt;</code>：只显示包含指定模式的提交消息。</li>
<li><code>--no-merges</code>：不显示合并提交。</li>
<li><code>--stat</code>：显示简略统计信息，包括修改的文件和行数。</li>
<li><code>--abbrev-commit</code>：使用短提交哈希值。</li>
<li><code>--pretty=&lt;格式&gt;</code>：使用自定义的提交信息显示格式。</li>
</ul>
<h2 id="git-tag-标签注解"><a href="#git-tag-标签注解" class="headerlink" title="git tag 标签注解"></a>git tag 标签注解</h2><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p>
<p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了</p>
<h2 id="git链接到github"><a href="#git链接到github" class="headerlink" title="git链接到github"></a>git链接到github</h2><p>你的本地 Git 仓库和 GitHub 仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p>
<p>在本地仓库文件目录下右键git bash使用以下命令生成 SSH Key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;你的Github邮箱@example.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后使用默认的，一路回车就行。</p>
<p>然后在C盘用户-用户名-.ssh文件内找到两个文件夹：id_rsa和id_rsa.pub，id_rsa.pub里面的就是你的ssh配置的key，然后复制到github里面（回到 github 上，进入 Account &#x3D;&gt; Settings（账户配置），复制粘贴到key上就行）</p>
]]></content>
      <categories>
        <category>git</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记</title>
    <url>/2024/06/15/C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="C-笔记-上世纪國男"><a href="#C-笔记-上世纪國男" class="headerlink" title="C++笔记-上世纪國男"></a>C++笔记-上世纪國男</h5><p>笔记</p>
<h5 id="C与C-的区别-一"><a href="#C与C-的区别-一" class="headerlink" title="C与C++的区别** (一)"></a>C与C++的区别** (一)</h5><ul>
<li><p>命名空间</p>
<ul>
<li>基本语法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空间名</span></span><br><span class="line"><span class="keyword">namespace</span>  标识符</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//变量</span></span><br><span class="line">    <span class="comment">//函数</span></span><br><span class="line">    <span class="comment">//结构体</span></span><br><span class="line">    <span class="comment">//类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> MM</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如何访问空间中的东西： 空间名::空间中的成员</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本访问方式</span></span><br><span class="line"><span class="comment">//相对于C语言来说，需要一个前缀</span></span><br><span class="line"><span class="comment">//::  作用域分辨符</span></span><br><span class="line">MM::age=<span class="number">1001</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(MM::name,<span class="string">&quot;灰姑凉&quot;</span>);</span><br><span class="line"><span class="comment">//省略前缀</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> 空间名;    <span class="comment">//省略当前这个空间名</span></span><br></pre></td></tr></table></figure>

<p>使用using 语法注意点是: 防止空间变量或者函数不要和空间外的变量或者函数名字相同</p>
<ul>
<li>命名空间的嵌套</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">	<span class="keyword">namespace</span> B</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如何访问: 剥洋葱</span></span><br><span class="line">A::num=<span class="number">1001</span>;</span><br><span class="line">A::B::age=<span class="number">18</span>;</span><br><span class="line"><span class="comment">//省略前缀</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> A;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> A::B;</span><br><span class="line">num=<span class="number">1991</span>;</span><br><span class="line">age=<span class="number">1992</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>C++最简单的程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>头文件的改变<ul>
<li>标准输入输出头文件: #include <iostream></li>
<li>包含C语言的文件： #include <cxxx> 当然用#include &lt;xxx.h&gt;</li>
<li>自己写的头文件还是用C语言的方式包含  #include ”myhead.h“</li>
</ul>
</li>
<li>基本输出的改变： cout 加上&lt;&lt;<ul>
<li>不再需要格式控制字符</li>
<li>依然支持转移字符</li>
<li>换行： endl替换\n</li>
</ul>
</li>
<li>基本输入的改变： cin 加上&gt;&gt;<ul>
<li>不再不需要格式空字符</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testPrint</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> age=<span class="number">1</span>;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>]=<span class="string">&quot;老babay&quot;</span>;</span><br><span class="line">	<span class="type">double</span> dNum=<span class="number">1.1</span>;</span><br><span class="line">	std::cout &lt;&lt; age &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	std::cout &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; dNum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std;			<span class="comment">//一般情况这句话会写头文件下面</span></span><br><span class="line">	cout &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; dNum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; dNum &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//cout.put(&#x27;A&#x27;);  IO流中讲</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testInput</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="comment">//单个数据输入</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;请输入一个整数:&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; age;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;请输入name,age,num:&quot;</span>;</span><br><span class="line">	std::cin &gt;&gt; name &gt;&gt; age &gt;&gt; num;</span><br><span class="line">	std::cout &lt;&lt; name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">testPrint</span>();</span><br><span class="line">	<span class="built_in">testInput</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C++数据类型的改变</p>
<ul>
<li>空指针的改变: NULL  改为nullptr</li>
<li>bool类型引入<ul>
<li>赋值为: true ,false</li>
<li>非零值非空值表示成立，只有0和空表示不成立</li>
<li>bool占用字节数是1</li>
<li>打印结果只有两个值: true:1 false: 0</li>
<li>一般条件表达式或者逻辑表达式，或者充当开关变量，标记变量</li>
</ul>
</li>
</ul>
</li>
<li><p>引用类型： C++极其重要的类型</p>
<ul>
<li>基本用法: 起别名</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型&amp; 标识符<span class="number">1</span>=标识符<span class="number">2</span></span><br><span class="line"><span class="comment">//标识符2有一个别名字的叫做标识符1， 他们是一个东西</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常引用： 给常量起别名</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> 类型&amp; 标识符=常量;</span><br></pre></td></tr></table></figure>

<ul>
<li>右值引用: 给右值起别名</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类型&amp;&amp; 标识符=右值</span><br></pre></td></tr></table></figure>

<ul>
<li>引用的用法<ul>
<li>当做函数参数:防止拷贝本的产生</li>
<li>当做函数返回值： 增加左值使用用法(等效返回值一个变量)</li>
</ul>
</li>
<li>自动推断类型： auto类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(<span class="type">int</span> size)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Reference types 引用类型</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">returnValue</span><span class="params">(<span class="type">int</span> num)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">returnValueReference</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num;			<span class="comment">//warning C4172: 返回局部变量或临时变量的地址: num</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SwapC</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>  <span class="comment">//int a=实参1  int b=实参2</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SwapCpp</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> <span class="comment">//int &amp;a =实参1 ，int &amp;b=实参2</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//以后想要在子函数中修改什么，传入相应的引用</span></span><br><span class="line">	<span class="type">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span>* &amp;p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p = &amp;num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//const在C++上面更为严格，类型需要严重性的一致</span></span><br><span class="line"><span class="comment">//如果你想要既可以传入常量也可以传入变量，需要const修饰</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">printConstValue</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只需要传入常量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printOnlyConstValue</span><span class="params">(<span class="type">int</span>&amp;&amp; num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testReferenceTypes</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//3.1 基本用法</span></span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span>&amp; b = a;					<span class="comment">//a就是b b就是a</span></span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//int&amp; constNum = 12;		//常量的引用，这样是错误的 </span></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>&amp; constNum = <span class="number">12</span>;</span><br><span class="line">	<span class="comment">//右值引用也可以表示常量</span></span><br><span class="line">	<span class="type">int</span>&amp;&amp; rightValue = <span class="number">1001</span>;</span><br><span class="line">	<span class="comment">//3.2 引用的用法</span></span><br><span class="line">	<span class="comment">//充当函数参数：防止拷贝本产生</span></span><br><span class="line">	<span class="comment">//当做函数返回值: 增加左值使用  不能返回局部变量引用</span></span><br><span class="line">	<span class="comment">//返回值是一个值</span></span><br><span class="line">	<span class="comment">//returnValue(num) = 12;		//错误</span></span><br><span class="line">	<span class="comment">//1 = 2;</span></span><br><span class="line">	<span class="built_in">returnValueReference</span>() = <span class="number">1111</span>;</span><br><span class="line">	cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//充当函数</span></span><br><span class="line">	<span class="type">int</span> aa = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> bb = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">SwapC</span>(aa, bb);</span><br><span class="line">	cout &lt;&lt; aa &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; bb &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">SwapCpp</span>(aa, bb);  <span class="comment">//注意不需要取地址传参</span></span><br><span class="line">	cout &lt;&lt; aa &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; bb &lt;&lt; endl;</span><br><span class="line">	<span class="type">int</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="built_in">modify</span>(p);</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//常引用传参</span></span><br><span class="line">	<span class="built_in">printConstValue</span>(<span class="string">&quot;ILoveyou&quot;</span>);</span><br><span class="line">	<span class="comment">//右值引用当做函数参数，只能传入右值</span></span><br><span class="line">	<span class="built_in">printOnlyConstValue</span>(<span class="number">1212</span>);</span><br><span class="line">	<span class="comment">//move可以把左值变成右值</span></span><br><span class="line">	<span class="built_in">printOnlyConstValue</span>(<span class="built_in">move</span>(num));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//auto类型</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMax</span><span class="params">(<span class="type">int</span>(*p)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(a, b) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testAuto</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//5.1 不能单独定义变量</span></span><br><span class="line">	<span class="comment">//auto a;  错误</span></span><br><span class="line">	<span class="comment">//5.2 auto一般结合赋值使用</span></span><br><span class="line">	<span class="keyword">auto</span> intNum = <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; intNum &lt;&lt; endl;   <span class="comment">//int</span></span><br><span class="line">	<span class="built_in">int</span> (*pMax)(<span class="type">int</span>, <span class="type">int</span>) = Max;</span><br><span class="line">	<span class="keyword">auto</span> ppMax = Max;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">ppMax</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">auto</span> pp = printMax;</span><br><span class="line">	<span class="built_in">pp</span>(ppMax, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1.基本数据类型的改变</span></span><br><span class="line">	<span class="type">int</span>* p = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//2.bool类型引入</span></span><br><span class="line">	<span class="type">bool</span> bNum = <span class="literal">true</span>;		<span class="comment">//正常赋值,用true和false</span></span><br><span class="line">	<span class="comment">//非正常的赋值</span></span><br><span class="line">	bNum = <span class="number">-111</span>;</span><br><span class="line">	cout &lt;&lt; bNum &lt;&lt; endl;	<span class="comment">//1</span></span><br><span class="line">	<span class="comment">//3.引用类型</span></span><br><span class="line">	<span class="built_in">testReferenceTypes</span>();</span><br><span class="line">	<span class="comment">//4. :: 作用分辨符</span></span><br><span class="line">	<span class="comment">//就近原则</span></span><br><span class="line">	<span class="type">int</span> num = <span class="number">100000</span>;</span><br><span class="line">	cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; ::num &lt;&lt; endl;		<span class="comment">//代表是全局区变量</span></span><br><span class="line">	<span class="comment">//5.自动推断类型</span></span><br><span class="line">	<span class="built_in">testAuto</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C++函数的改变 </p>
<ul>
<li><p>内联思想： 函数以二进制形式存在，去提高效率</p>
<ul>
<li>内联函数：用inline修饰的函数</li>
<li>短小精悍</li>
<li>在结构体中或者类型实现的函数，默认为内联</li>
</ul>
</li>
<li><p>重载思想： C++允许同名不同参的函数存在</p>
<ul>
<li>参数个数不同</li>
<li>参数类型不同</li>
<li>参数顺序不同(建立在存在不同类型)</li>
<li>常属性的成员函数和类中的普通函数重载  (类中会讲)</li>
</ul>
</li>
<li><p>缺省思想： 给函数形参初始化，达到不同形态的函数调用</p>
<ul>
<li>缺省的顺序 必须是从右往左，连续缺省</li>
<li>缺省时候，要避免存在普通函数，防止存在二义性</li>
</ul>
</li>
<li><p>Lambda表达式： 函数的定义 并且返回一个函数指针，所以一般在C++中会结合auto使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[捕获方式](函数参数)能否修改 是否存在异常-&gt;函数返回值类型&#123;函数体;&#125;;</span><br><span class="line">捕获方式: 理解使用函数外面的变量的方式</span><br><span class="line"><span class="number">1.</span>[]</span><br><span class="line"><span class="number">2.</span>[=] </span><br><span class="line"><span class="number">3.</span>[&amp;]</span><br><span class="line"><span class="number">4.</span>[&amp;x,=]</span><br><span class="line"><span class="number">5.</span>[<span class="keyword">this</span>]  类中数据成员的捕获</span><br><span class="line">函数参数： 自己写函数的时候的函数参数</span><br><span class="line">能否修改: <span class="keyword">mutable</span></span><br><span class="line">是否存在异常: <span class="built_in">throw</span>() 不存在异常</span><br><span class="line">函数返回值类型:自己写函数的时候的函数返回值</span><br><span class="line">函数体： 原来函数的函数体</span><br><span class="line"><span class="comment">//注意点： 一般在用的时候，能否修改 是否存在异常-&gt;函数返回值类型 是可以省略</span></span><br><span class="line">[捕获方式](函数参数)&#123;函数体;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.参数的数目不同</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a + b + c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.参数的类型不同</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.顺序不同</span></span><br><span class="line"><span class="comment">//错误，不可以跟上面函数构成重载</span></span><br><span class="line"><span class="comment">//void print(char b, char a) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; a + b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> age, <span class="type">double</span> num)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span> num, <span class="type">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; age &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//const属性不构成重载</span></span><br><span class="line"><span class="comment">//void print(int a) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void print(const int a) </span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//4.缺省:不传入参数使用默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">(<span class="type">int</span> a=<span class="number">1</span>, <span class="type">int</span> b=<span class="number">2</span>, <span class="type">int</span> c=<span class="number">3</span>,<span class="type">int</span> d=<span class="number">4</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; a + b + c + d &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.Lambda表达</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMax</span><span class="params">(<span class="type">int</span>(*p)(<span class="type">int</span>, <span class="type">int</span>), <span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(a, b) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testLambda</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//最完整的Lambda表达式</span></span><br><span class="line">	<span class="comment">//int Max(int a, int b) </span></span><br><span class="line">	<span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="built_in">throw</span>()-&gt;<span class="type">int</span> &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//一般用的时候，怎么简单怎么来，结合auto+省略的Lambda表达式去使用</span></span><br><span class="line">	<span class="keyword">auto</span> p= [](<span class="type">int</span> a, <span class="type">int</span> b)&#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//进阶一下： 函数的定义和调用写在一起</span></span><br><span class="line">	cout &lt;&lt; [](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;(<span class="number">1</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">printMax</span>([](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a + b; &#125;, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">	<span class="built_in">printMax</span>([](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a - b; &#125;, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">	<span class="comment">//捕获方式</span></span><br><span class="line">	<span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//[]() &#123;cout &lt;&lt; num &lt;&lt; endl; &#125;;错误  没有捕获方式，表示没用权力</span></span><br><span class="line">	<span class="keyword">auto</span> p1=[=]() &#123;cout &lt;&lt; num &lt;&lt; endl; &#125;;</span><br><span class="line">	<span class="keyword">auto</span> p2 = [&amp;]() &#123;cout &lt;&lt; num &lt;&lt; endl; &#125;;</span><br><span class="line">	<span class="built_in">p1</span>();					<span class="comment">//打印1</span></span><br><span class="line">	<span class="built_in">p2</span>();</span><br><span class="line">	num = <span class="number">1001</span>;</span><br><span class="line">	<span class="built_in">p1</span>();					<span class="comment">//不会因为值的改变而改变调用  ，打印1</span></span><br><span class="line">	<span class="built_in">p2</span>();</span><br><span class="line">	<span class="comment">//[this] 后面讲了类的时候在讲</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">Max</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>, <span class="number">1.1</span>);</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1.1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printValue</span>();			<span class="comment">//a=1,b=2,c=3,d=4;</span></span><br><span class="line">	<span class="built_in">printValue</span>(<span class="number">11</span>);			<span class="comment">//a=11,b=2,c=3,d=4;</span></span><br><span class="line">	<span class="built_in">printValue</span>(<span class="number">11</span>, <span class="number">22</span>);       <span class="comment">//a=11,b=22,c=3,d=4</span></span><br><span class="line">	<span class="built_in">testLambda</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="C与C-的区别-二）"><a href="#C与C-的区别-二）" class="headerlink" title="C与C++的区别 (二）"></a><strong>C与C++的区别</strong> (二）</h5><ul>
<li><p>动态申请内存的区别</p>
<ul>
<li>C语言中申请内存: realloc malloc calloc  C++中只有new</li>
<li>C语言释放内存: free   C++中 delete</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span>  <span class="comment">//和#include &lt;string&gt;有区别	</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MM</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testNewMemory</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1.申请单个变量内存</span></span><br><span class="line">	<span class="type">int</span>* pC = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	<span class="built_in">assert</span>(pC);</span><br><span class="line">	*pC = <span class="number">123</span>;</span><br><span class="line">	<span class="built_in">free</span>(pC);</span><br><span class="line">	pC = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="type">int</span>* cpp = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">	*cpp = <span class="number">123</span>;</span><br><span class="line">	cout &lt;&lt; *cpp &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> cpp;</span><br><span class="line">	cpp = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//2.申请一段内存   一维数组</span></span><br><span class="line">	<span class="type">int</span>* pcArray = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * <span class="number">3</span>);  <span class="comment">//int pcArray[3];</span></span><br><span class="line">	<span class="built_in">assert</span>(pcArray);</span><br><span class="line">	pcArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; pcArray[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">free</span>(pcArray);</span><br><span class="line">	pcArray = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="type">int</span>* cppArray = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];    <span class="comment">//int cppArray[3];</span></span><br><span class="line">	cppArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; cppArray[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span>[] cppArray;</span><br><span class="line">	cppArray = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//3.申请内存并做初始化</span></span><br><span class="line">	<span class="comment">//C语言有一个calloc</span></span><br><span class="line">	<span class="comment">//3.1 单个数据用()</span></span><br><span class="line">	<span class="type">int</span>* pNum = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">100</span>);      <span class="comment">//*pNum=100</span></span><br><span class="line">	cout &lt;&lt; pNum &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> pNum;</span><br><span class="line">	pNum = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//3.2 多个数据用&#123;&#125;</span></span><br><span class="line">	<span class="type">int</span>* pArray = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>]&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;  <span class="comment">//int pArray[3]=&#123;1,2,3&#125;;</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) </span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; pArray[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//C++允许你重新管理申请堆内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testReNew</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span>* sum = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">100</span>];</span><br><span class="line">	<span class="comment">//前面十六个字节存放4个整数</span></span><br><span class="line">	<span class="comment">//(sum + 0)代表是从那个位置开始申请</span></span><br><span class="line">	<span class="type">int</span>* pInt = <span class="built_in">new</span>(sum + <span class="number">0</span>) <span class="type">int</span>[<span class="number">4</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">	<span class="comment">//来10个字节存储字符串</span></span><br><span class="line">	<span class="type">char</span>* pstr = <span class="built_in">new</span>(pInt + <span class="number">4</span>) <span class="type">char</span>[<span class="number">10</span>]&#123;<span class="string">&quot;ILoveyou&quot;</span>&#125;;</span><br><span class="line">	<span class="comment">//等效：char* pstr = new(sum + 16) char[10]&#123;&quot;ILoveyou&quot;&#125;;</span></span><br><span class="line">	cout &lt;&lt; sum + <span class="number">16</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; pstr &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">	<span class="keyword">delete</span>[] sum;</span><br><span class="line">	sum = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testUserData</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//结构体不需要struct关键字</span></span><br><span class="line">	<span class="comment">//单一结构体也是&#123;&#125;初始化</span></span><br><span class="line">	MM* pMM = <span class="keyword">new</span> MM &#123; <span class="string">&quot;张三&quot;</span>, <span class="number">18</span> &#125;;</span><br><span class="line">	cout &lt;&lt; pMM-&gt;name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; pMM-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">testNewMemory</span>();</span><br><span class="line">	<span class="built_in">testReNew</span>();</span><br><span class="line">	<span class="built_in">testUserData</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C++结构体的基本区别</p>
<ul>
<li>类型上： 不在需要struct ，直接结构体名可以充当类型，.c文件必须struct关键字</li>
<li>访问方式和C语言没区别<ul>
<li>必须要用结构体变量访问</li>
<li>变量访问的方式： 变量.成员</li>
<li>指针表示，访问: 指针-&gt;成员</li>
</ul>
</li>
<li>C++结构体中允许存在函数<ul>
<li>结构体中的函数如何访问数据：直接访问</li>
<li>结构体中函数如何在类外实现：函数名必须要用：结构体名::函数名</li>
<li>通过结构体中的函数去设置结构体数据</li>
<li>C++结构体申请内存</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MM</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//数据成员</span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="comment">//成员函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">printData</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setData</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mmName, <span class="type">int</span> mmAge)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MM::printData</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MM::setData</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mmName, <span class="type">int</span> mmAge)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(name,<span class="number">20</span>, mmName);    <span class="comment">//&quot;宝宝&quot;</span></span><br><span class="line">	age = mmAge;				  <span class="comment">//19</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testCppStruct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1.基本的访问方式</span></span><br><span class="line">	MM mm = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">19</span> &#125;;</span><br><span class="line">	cout &lt;&lt; mm.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; mm.age &lt;&lt; endl;</span><br><span class="line">	MM* pMM = &amp;mm;</span><br><span class="line">	cout &lt;&lt; pMM-&gt;name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; pMM-&gt;age &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//2.C++结构体中的函数的访问</span></span><br><span class="line">	mm.<span class="built_in">print</span>();						<span class="comment">//打印就是mm.name,mm.age</span></span><br><span class="line">	pMM-&gt;<span class="built_in">print</span>();</span><br><span class="line">	MM baby = &#123; <span class="string">&quot;baby&quot;</span>,<span class="number">19</span> &#125;;</span><br><span class="line">	baby.<span class="built_in">print</span>();					<span class="comment">//baby.name, baby.age</span></span><br><span class="line">	baby.<span class="built_in">printData</span>();</span><br><span class="line">	<span class="comment">//3.通过函数去描述行为</span></span><br><span class="line">	MM boy;</span><br><span class="line">	boy.<span class="built_in">setData</span>(<span class="string">&quot;宝宝&quot;</span>, <span class="number">19</span>);			<span class="comment">//boy.name=&quot;宝宝&quot;，boy.age=19</span></span><br><span class="line">	boy.<span class="built_in">print</span>();					<span class="comment">//boy.name ,boy.age</span></span><br><span class="line">	<span class="comment">//4.C++结构体申请内存</span></span><br><span class="line">	<span class="comment">//这种写法是建立在没有构造函数的基础下是对的</span></span><br><span class="line">	MM* p = <span class="keyword">new</span> MM;</span><br><span class="line">	p-&gt;<span class="built_in">setData</span>(<span class="string">&quot;申请内存&quot;</span>, <span class="number">199</span>);</span><br><span class="line">	p-&gt;<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line">	p = <span class="literal">nullptr</span>;</span><br><span class="line">	MM* pArray = <span class="keyword">new</span> MM[<span class="number">3</span>];    </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) </span><br><span class="line">	&#123;</span><br><span class="line">		pArray[i].<span class="built_in">setData</span>(<span class="string">&quot;数组&quot;</span>, i + <span class="number">19</span>);</span><br><span class="line">		pArray[i].<span class="built_in">print</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span>[] pArray;</span><br><span class="line">	pArray = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">testCppStruct</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C++中string： 本节课只需要知道如何使用C++string即可，不需要知道为什么这样用</p>
<ul>
<li>首先需要知道C++string 是一个类，头文件是#include<string></li>
<li>如何使用C++string</li>
<li>string 中的一些函数操作 <a href="https://docs.microsoft.com/zh-cn/cpp/standard-library/basic-string-class?view=msvc-160">basic_string 类 | Microsoft Docs</a></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testCppString</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1.常用的创建方式</span></span><br><span class="line">	<span class="comment">//1.1常用的创建方式</span></span><br><span class="line">	string str1;				<span class="comment">//类似创建变量的方式</span></span><br><span class="line">	std::string noStd;			<span class="comment">//没有using namespace std ,也需要加前缀</span></span><br><span class="line">	str1 = <span class="string">&quot;ILoveyou&quot;</span>;</span><br><span class="line">	cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">	<span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;ILoveyou&quot;</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">	<span class="function">string <span class="title">str3</span><span class="params">(str2)</span></span>;</span><br><span class="line">	cout &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//1.2不常用</span></span><br><span class="line">	<span class="function">string <span class="title">str4</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;O&#x27;</span>)</span></span>;				<span class="comment">//str4=&quot;OOOOO&quot;;</span></span><br><span class="line">	cout &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">	<span class="function">string <span class="title">str5</span><span class="params">(<span class="string">&quot;Iloveyou&quot;</span>, <span class="number">1</span>, <span class="number">5</span>)</span></span>;		<span class="comment">//从0开始，用第一个到第五个字符初始化</span></span><br><span class="line">	cout &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//2.基本操作</span></span><br><span class="line">	<span class="comment">//2.1string里面有一个函数可以表示字符串属性</span></span><br><span class="line">	cout &lt;&lt; str5.<span class="built_in">size</span>() &lt;&lt; endl;		<span class="comment">//元素个数</span></span><br><span class="line">	cout &lt;&lt; str5.<span class="built_in">length</span>() &lt;&lt; endl;		<span class="comment">//长度</span></span><br><span class="line">	cout &lt;&lt; str5.<span class="built_in">capacity</span>() &lt;&lt; endl;	<span class="comment">//容量</span></span><br><span class="line">	string  longStr = <span class="string">&quot;12345678910123423&quot;</span>;</span><br><span class="line">	cout &lt;&lt; longStr.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//2.2 常规操作</span></span><br><span class="line">	<span class="comment">//比较，直接比即可  所有条件运算符直接用</span></span><br><span class="line">	<span class="comment">//运算符重载</span></span><br><span class="line">	cout &lt;&lt; (longStr &gt; str5) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; (longStr == str5) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; (longStr != str5) &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//连接直接用+</span></span><br><span class="line">	string strF = <span class="string">&quot;First&quot;</span>;</span><br><span class="line">	string strS = <span class="string">&quot;Second&quot;</span>;</span><br><span class="line">	string result = strF + strS;</span><br><span class="line">	cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//3.string与char* 转换</span></span><br><span class="line">	<span class="comment">//不能用%s方式直接打印string</span></span><br><span class="line">	<span class="comment">//调用string类中两个函数</span></span><br><span class="line">	<span class="comment">//data() ,c_str()</span></span><br><span class="line">	<span class="function">string <span class="title">info</span><span class="params">(<span class="string">&quot;C++中的string&quot;</span>)</span></span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, info.<span class="built_in">c_str</span>());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, info.<span class="built_in">data</span>());</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	string strName = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(name, <span class="number">20</span>, strName.<span class="built_in">c_str</span>());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, name);</span><br><span class="line">	<span class="comment">//4.下表法访问string</span></span><br><span class="line">	string pStr = <span class="string">&quot;ILoveyou&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pStr.<span class="built_in">length</span>(); i++) </span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; pStr.<span class="built_in">at</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; pStr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">testCppString</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C++类型转换 </p>
<ul>
<li>基本数据类型转换: 类型(变量)</li>
<li>static_cast<ul>
<li>可以用做基本数据类型转换</li>
<li>把空类型的指针转换为目标指针类型</li>
<li>不能转换带有const属性指针</li>
</ul>
</li>
<li>const_cast： const属性指针的一些转换操作</li>
<li>reinterpret_cast：指针转整数，整数转指针</li>
<li>dynamic_cast    :后续讲完多态在给同学们讲解</li>
</ul>
</li>
</ul>
<h5 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h5><p>写两个子函数</p>
<ul>
<li>第一个子函数，实现二维数组的内存申请</li>
<li>第二个子函数，实现内存释放</li>
</ul>
<h5 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h5><ul>
<li>类和对象<ul>
<li>什么是类? 类是一些具有共同属性和行为的事物的抽象</li>
<li>什么是对象? 类的具体化(实例化)，明确属性和行为</li>
<li>属性: 数据成员(int，float，char…)描述， 一系列事物公有特征</li>
<li>行为: 成员函数(类中函数)描述,一系列公有事物共同操作</li>
</ul>
</li>
<li>类的特点<ul>
<li>封装性</li>
<li>继承性</li>
<li>多态性</li>
<li>抽象性</li>
<li>隐藏性</li>
</ul>
</li>
<li>学会创建类的语法<ul>
<li>权限限定词:public,protected,private，在结构体中也是可以使用</li>
<li>类中默认是private属性，结构体中默认是public属性</li>
<li>权限限定词作用是用来限定类外对类中数据访问<ul>
<li>一般情况类外访问类中数据必须通过对象来访问，所以我们写C++程序，做的第一件事是创建对象</li>
<li>权限限定词是可以多个，或者没有</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:			<span class="comment">//公有</span></span><br><span class="line"><span class="keyword">protected</span>:		<span class="comment">//保护</span></span><br><span class="line"><span class="keyword">private</span>:    	<span class="comment">//私有</span></span><br><span class="line">&#125;;  <span class="comment">//分号必须要有的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>明白类中的权限问题<ul>
<li>静态数据成员和静态成员也受权限限定，可以不需要对象也可以调用</li>
<li>类外只能访问public属性，别的属性都不能被访问，类中没有权限限定</li>
<li>protected和private 在继承中有区别，目前不需要知道</li>
</ul>
</li>
<li>学会如何访问类中的数据<ul>
<li>类中数据可以直接初始化</li>
<li>接口的概念，C++当中一般指是public属性下方法(成员函数)</li>
<li>两种修改类中数据的方式<ul>
<li>通过提供一个带参的函数去修改数据成员</li>
<li>通过返回引用的方式修改数据成员</li>
</ul>
</li>
</ul>
</li>
<li>C++各种对象的形式对类中数据的访问<ul>
<li>普通对象<ul>
<li>注意权限问题，类外只能访问public属性下内容</li>
<li>对象用: 对象.成员</li>
</ul>
</li>
<li>对象数组</li>
<li>对象指针<ul>
<li>可以用指针指向运算符(-&gt;)访问 ：指针-&gt;成员</li>
<li>也可以用(*指针).成员</li>
</ul>
</li>
<li>对象本身就是一个数据，所以普通数据能做他都可以做<ul>
<li>当做函数返回值</li>
<li>当做函数参数</li>
<li>当做变量赋值</li>
</ul>
</li>
<li>this指针<ul>
<li>this指针可以解决形参名和数据成员名字相同的问题</li>
<li>可以函数充当函数返回值</li>
</ul>
</li>
<li>类的成员函数的表示方式<ul>
<li>如何定义一个类的成员函数的指针</li>
<li>如果通过成员函数的函数指针调用函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h5><ul>
<li>构造函数<ul>
<li>没有返回值</li>
<li>函数名和类名相同</li>
<li>构造对象的时候被调用</li>
<li>构造函数一般情况都是用来数据成员初始化</li>
<li>一般情况构造函数是public属性</li>
<li>默认的拷贝构造函数是没有参数，无参构造函数,一旦自己写构造函数，默认的就不存在</li>
</ul>
</li>
<li>拷贝构造函数<ul>
<li>拷贝构造函数也是构造函数,具有构造函数相同属性</li>
<li>拷贝构造函数只有一个参数，就是对对象的引用</li>
<li>拷贝构造主要是为了实现通过一个对象去创建对象</li>
</ul>
</li>
<li>析构函数<ul>
<li>函数名: ~类名</li>
<li>析构函数没有参数</li>
<li>public属性</li>
<li>不写析构存在一个默认的析构</li>
<li>析构函数是对象死亡的时候(生命周期结束)，自动调用，不需要人调用</li>
<li>什么时候需要手动写析构函数，当类中的数据成员做到了内存申请的时候，需要手动写析构函数</li>
</ul>
</li>
<li>深拷贝和浅拷贝： 当数据成员是指针的时候，并做内存申请</li>
<li>默认的函数的相关操作<ul>
<li>我们可以删除默认的函数，用delete删除</li>
<li>我们使用默认的函数，用default函数</li>
</ul>
</li>
</ul>
<h5 id="C-特殊成员"><a href="#C-特殊成员" class="headerlink" title="C++特殊成员"></a>C++特殊成员</h5><ul>
<li><p>const成员</p>
<ul>
<li><p>常数据成员： const修饰的数据成员</p>
<ul>
<li>const属性代表只读(不可以修改)</li>
<li>常数据成员的初始化必须要采用初始化参数列表</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化参数列表</span></span><br><span class="line">类名(变量<span class="number">1</span>，变量<span class="number">2</span>,...):数据成员<span class="number">1</span>(变量<span class="number">1</span>)，数据成员<span class="number">2</span>(变量<span class="number">2</span>)...&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常成员函数:  const修饰的成员成员函数,注意写法，const是放在函数后面</p>
<ul>
<li>在当前常成员函数中不能修改数据成员</li>
<li>常成员可以和普通同时存在</li>
</ul>
</li>
<li><p>常对象: const 修饰对象</p>
<ul>
<li>常对象只能调用常成员函数</li>
</ul>
</li>
</ul>
</li>
<li><p>static成员</p>
<ul>
<li>static数据成员<ul>
<li>必须在类外做初始化</li>
<li>静态数据成员是属于类的，不属于对象，是所有对象共有，也就是说所有对象用的是一个数据</li>
<li>静态数据成员访问不需要对象，可以直接用类名限定访问: 类名::成员</li>
<li>静态数据成员也受权限限定</li>
</ul>
</li>
<li>static成员函数<ul>
<li>访问可以不需要对象，用对象访问也可以的</li>
<li>也受权限限定</li>
<li>静态成员函数不能直接访问非静态数据成员,只能通过指定访问</li>
</ul>
</li>
<li>static对象<ul>
<li>保留上一次运行的结果，初始化操作只做一次</li>
</ul>
</li>
</ul>
</li>
<li><p>类的组合 ：一个类是另一个类一部分</p>
<ul>
<li>构造函数的的写法：必须采用初始化参数列表</li>
<li>构造的顺序(考试)<ul>
<li>组合类中构造顺序和初始化参数列表写的顺序无关，只和声明顺序有关</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="C-友元"><a href="#C-友元" class="headerlink" title="C++友元"></a>C++友元</h5><ul>
<li>友元函数：单纯提供一个场所给予类的对象具有无视权限的功能<ul>
<li>普通函数成为友元： 再类中用friend 声明即可</li>
<li>以另一个类的成员函数成为友元函数</li>
</ul>
</li>
<li>友元类</li>
</ul>
<h5 id="C-类的继承"><a href="#C-类的继承" class="headerlink" title="C++类的继承"></a>C++类的继承</h5><ul>
<li>继承基本语法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类名: 继承方式 父类名</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//继承方式: 权限限定词</span></span><br><span class="line"><span class="comment">//public  公有</span></span><br><span class="line"><span class="comment">//protected: 保护</span></span><br><span class="line"><span class="comment">//private: 私有继承</span></span><br><span class="line"><span class="keyword">class</span> 派生类名:继承方式 基类名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//生成新的属性和行为</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>继承的实质: 父类(基类)当中的属性，子类(派生类)中也有一份，这一份的属性是由继承方式的决定的。</p>
<ul>
<li>继承权限问题</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>public</th>
<th>protected</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>public ：继承</td>
<td>public</td>
<td>protected</td>
<td>不可访问</td>
</tr>
<tr>
<td>protected：继承</td>
<td>protected</td>
<td>protected</td>
<td>不可访问</td>
</tr>
<tr>
<td>private:继承</td>
<td>private</td>
<td>private</td>
<td>不可访问</td>
</tr>
</tbody></table>
<ul>
<li>继承具有遗传性</li>
</ul>
<p>继承的属性是一值存在的，无论被继承多少代，都是存在，所以一般类的击沉不会写太多层数，导致类很冗长。</p>
<ul>
<li><p>继承中的构造函数</p>
<ul>
<li>子类构造函数必须要调用父类的构造函数</li>
<li>子类的构造函数必须采用初始化列表的写法去初始化继承下来的属性</li>
</ul>
</li>
<li><p>继承的分类</p>
<ul>
<li>单继承：只有一个父类</li>
<li>多继承: 2个或者以上的父类<ul>
<li>菱形继承</li>
</ul>
</li>
</ul>
</li>
<li><p>继承中的同名访问问题  &#x2F;&#x2F;21:20继续</p>
<ul>
<li>正常赋值的访问：  默认访问方式采用就近原则,当然可以采用类名限定指定的方式</li>
<li>非正常赋值的访问： 没有virtual看指针类型</li>
</ul>
</li>
<li><p>继承的作用：</p>
<p>抽象中的抽象。其实大家在使用继承的时候，更多的是继承别人的东西</p>
<p>自己设计代码采用继承的方式，更多增加代码的重用性</p>
</li>
</ul>
<p>C++继承作业: 抽象画图工具的工具类</p>
<h5 id="C-虚函数和多态"><a href="#C-虚函数和多态" class="headerlink" title="C++虚函数和多态"></a>C++虚函数和多态</h5><ul>
<li>虚函数与虚函数表</li>
<li>纯虚函数和抽象类</li>
<li>多态</li>
<li>ADT过程和虚析构函数</li>
<li>dynamic下行转换和交叉转换  </li>
<li>类中类的访问</li>
</ul>
<h5 id="C-模板"><a href="#C-模板" class="headerlink" title="C++模板"></a>C++模板</h5><ul>
<li>函数模板</li>
<li>类模板</li>
<li>模板特化</li>
</ul>
<h5 id="C-可变参模板"><a href="#C-可变参模板" class="headerlink" title="C++可变参模板"></a>C++可变参模板</h5><ul>
<li>可变参函数模板<ul>
<li>折叠参数类型的定义 : typename …Arg  </li>
<li>折叠参数的定义: Arg  …arg;</li>
<li>如何展开折叠参数<ul>
<li>递归的方式去展开参数包</li>
<li>通过列表({}的数据)展开参数包</li>
</ul>
</li>
</ul>
</li>
<li>可变参类模板： 类模板用到可变参数<ul>
<li>继承+模板特化的方式展开</li>
<li>递归的方式展开参数包</li>
</ul>
</li>
<li>标准库中的可变参模板<ul>
<li>包含头文件：#include <tuple></li>
<li>如何创建</li>
<li>如何获取数据</li>
<li>其他操作</li>
</ul>
</li>
</ul>
<h5 id="C-智能指针"><a href="#C-智能指针" class="headerlink" title="C++智能指针"></a>C++智能指针</h5><p>​	智能指针本质就是一个模板类，通过类的对象生命周期的自动结束效果，实现内存的自动释放。也就是把指针当做对象去处理，所以一般不会去new一个智能指针，自己new还是需要自己手动释放，一般都是创建一个智能指针对象，去管理堆区的变量。</p>
<ul>
<li>shared_ptr</li>
<li>weak_ptr</li>
<li>unique_ptr</li>
</ul>
<h5 id="C-类型推断"><a href="#C-类型推断" class="headerlink" title="C++类型推断"></a>C++类型推断</h5><ul>
<li>auto</li>
<li>decltype</li>
</ul>
<h5 id="C-IO流"><a href="#C-IO流" class="headerlink" title="C++IO流"></a>C++IO流</h5><ul>
<li>输入输出流</li>
<li>字符流</li>
<li>文件流</li>
</ul>
<h5 id="C-正则表达式"><a href="#C-正则表达式" class="headerlink" title="C++正则表达式"></a>C++正则表达式</h5><p>正则是一种规则，它用来匹配（进而捕获、替换）字符串。这种规则需要“模式”、“字符串”这两样东西，“模式”根据正则规则，来处理“字符串”。这种规则被许多语言支持，C++11以后才支持正则。</p>
<h6 id="具有特殊意义的元字符"><a href="#具有特殊意义的元字符" class="headerlink" title="具有特殊意义的元字符"></a>具有特殊意义的元字符</h6><p>\：\字符能够改变字符原本的含义</p>
<p>^：^字符指示字符串的头，且要求字符串以字符开头，不占位。^表示一个真正的^符号。</p>
<p>$：$字符指示字符串的尾，且要求字符串以字符结尾，不占位。$表示一个真正的$符号。</p>
<p>\b：指示字符串的边界（头&#x2F;尾&#x2F;空格左&#x2F;空格右），字符\b要求边界的左边是字符，\b字符要求边界的右边是字符。</p>
<p>.：表示一个除了\n以外的任意一个字符。\.表示一个真正的.符号。</p>
<p>|：a|b  a或b之一</p>
<p>[abc]：abc之中的任意一个</p>
<p>[^abc]:  abc之外的</p>
<p>[a-z]:	任意小写字母</p>
<p>[^a-z]:  除了小写字母之外的</p>
<p>\w：任意一个字母数字下划线，等价于[(0-9)(a-z)(A-Z)(_)]</p>
<p>\W：字母数字下划线之外的，等价于[]</p>
<p>\d:	任意一个数子</p>
<p>\D:	除了数字之外的</p>
<p>\s:	空白符（空格、制表符、换页符）</p>
<h5 id="C-日期时间库"><a href="#C-日期时间库" class="headerlink" title="C++日期时间库"></a>C++日期时间库</h5><ul>
<li>时间间隔 duration</li>
<li>时钟 clock()</li>
<li>时间点 time point</li>
<li>时间转换</li>
</ul>
<h5 id="时间间隔duration"><a href="#时间间隔duration" class="headerlink" title="时间间隔duration"></a>时间间隔duration</h5><p>duration表示一段时间间隔，用来记录时间长度，可以表示几秒、几分钟、几个小时的时间间隔,</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Rep</span>, <span class="keyword">class</span> <span class="title class_">_Period</span> = ratio&lt;<span class="number">1</span>&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> duration;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ratio 代表的是一个分子除以分母的数值</span></span><br><span class="line"><span class="comment">ratio&lt;1,1000000000&gt;     纳秒</span></span><br><span class="line"><span class="comment">ratio&lt;1,1000000&gt; 		微秒</span></span><br><span class="line"><span class="comment">ratio&lt;1,1000&gt;	   		毫秒</span></span><br><span class="line"><span class="comment">ratio&lt;60*60*24&gt;			一天</span></span><br><span class="line"><span class="comment">ratio&lt;60*60&gt;			小时</span></span><br><span class="line"><span class="comment">ratio&lt;60&gt;				分钟</span></span><br><span class="line"><span class="comment">ratio&lt;1&gt;				秒</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>为了方便使用，在标准库中定义了一些常用的时间间隔时、分、秒、毫秒、微秒、纳秒</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>纳秒：<code>std::chrono::nanoseconds</code></td>
<td>duration&lt;long long, nano&gt;</td>
</tr>
<tr>
<td>微秒：<code>std::chrono::microseconds</code></td>
<td>duration&lt;long long, micro&gt;</td>
</tr>
<tr>
<td>毫秒：<code>std::chrono::milliseconds</code></td>
<td>duration&lt;long long, milli&gt;</td>
</tr>
<tr>
<td>秒：<code>std::chrono::seconds</code></td>
<td>duration<long long></td>
</tr>
<tr>
<td>分钟：<code>std::chrono::minutes</code></td>
<td>duration&lt;int, ratio&lt;60&gt;&gt;</td>
</tr>
<tr>
<td>小时：<code>std::chrono::hours</code></td>
<td>duration&lt;int, ratio&lt;3600&gt;&gt;</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1秒后&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1秒后&quot;</span> &lt;&lt; endl;</span><br><span class="line">	std::<span class="function">chrono::seconds  <span class="title">test</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; test.<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line">	std::<span class="function">chrono::hours  <span class="title">h</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	chrono::seconds result = h - test;</span><br><span class="line">	cout &lt;&lt; result.<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; result &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="时钟clocks"><a href="#时钟clocks" class="headerlink" title="时钟clocks"></a>时钟clocks</h5><h6 id="system-clock"><a href="#system-clock" class="headerlink" title="system_clock"></a>system_clock</h6><p>系统范围的实时时钟,对当前时间点 time_point 的访问，将得到时间点转换为 time_t 类型的时间对象，就可以基于这个时间对象获取到当前的时间信息了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回表示当前时间的时间点。</span></span><br><span class="line"><span class="type">static</span> std::<span class="function">chrono::time_point&lt;std::chrono::system_clock&gt; <span class="title">now</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">//将 time_point 时间点类型转换为 std::time_t 类型</span></span><br><span class="line"><span class="function"><span class="type">static</span> std::<span class="type">time_t</span> <span class="title">to_time_t</span><span class="params">( <span class="type">const</span> time_point&amp; t )</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">//将 std::time_t 类型转换为 time_point 时间点类型</span></span><br><span class="line"><span class="type">static</span> std::chrono::<span class="function">system_clock::time_point <span class="title">from_time_t</span><span class="params">( std::<span class="type">time_t</span> t )</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure>

<p>获取当前的系统时间:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//http://www.cplusplus.com/reference/chrono/time_point/time_point/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	chrono::system_clock::time_point result;</span><br><span class="line">	chrono::duration&lt;<span class="type">int</span>, ratio&lt;<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>&gt;&gt; <span class="built_in">day</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="comment">//1970.1.1时间 + 1天</span></span><br><span class="line">	chrono::<span class="function">system_clock::time_point <span class="title">ppt</span><span class="params">(day)</span></span>; </span><br><span class="line">	<span class="comment">//1970.1.1时间 + 10天</span></span><br><span class="line">	chrono::<span class="function">system_clock::time_point <span class="title">t</span><span class="params">(chrono::duration&lt;<span class="type">int</span>, ratio&lt;<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>&gt;&gt;(<span class="number">10</span>))</span></span>;</span><br><span class="line">	<span class="comment">//系统当前时间</span></span><br><span class="line">	chrono::system_clock::time_point tp = chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">	<span class="comment">//转换为time_t类型数据</span></span><br><span class="line">	<span class="type">time_t</span> tm = chrono::system_clock::<span class="built_in">to_time_t</span>(tp);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;今天日期:&quot;</span> &lt;&lt; <span class="built_in">ctime</span>(&amp;tm);</span><br><span class="line">	std::tm* p = <span class="built_in">localtime</span>(&amp;tm);</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;格式化输出时间:&quot;</span> &lt;&lt; <span class="built_in">put_time</span>(p, <span class="string">&quot;%F %X&quot;</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;count:&quot;</span> &lt;&lt; tp.<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="steady-clock"><a href="#steady-clock" class="headerlink" title="steady_clock"></a>steady_clock</h6><p>程序耗时的时长，此时使用 syetem_clock 就不合适了，因为这个时间可以跟随系统的设置发生变化。在 C++11 中提供的时钟类 steady_clock 相当于秒表，只要启动就会进行时间的累加，并且不能被修改，非常适合于进行耗时的统计。</p>
<p>计算程序执行期间消耗的总时长</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	chrono::steady_clock::time_point start = chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;start:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) </span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;运行中....&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	chrono::steady_clock::time_point end = chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">	<span class="keyword">auto</span> dt = end - start;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;耗时:&quot;</span> &lt;&lt; dt.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;ns&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="high-resolution-clock"><a href="#high-resolution-clock" class="headerlink" title="high_resolution_clock"></a>high_resolution_clock</h6><p>high_resolution_clock 提供的时钟精度比 system_clock 要高，它也是不可以修改的。在底层源码中，这个类其实是 steady_clock 类的别名。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	chrono::high_resolution_clock::time_point start = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;start:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) </span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;运行中....&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	chrono::high_resolution_clock::time_point end = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">	<span class="keyword">auto</span> dt = end - start;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;耗时:&quot;</span> &lt;&lt; dt.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;ns&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="时间转换函数"><a href="#时间转换函数" class="headerlink" title="时间转换函数"></a><strong>时间转换函数</strong></h5><h6 id="duration-cast"><a href="#duration-cast" class="headerlink" title="duration_cast"></a>duration_cast</h6><p>duration_cast 是 chrono 库提供的一个模板函数，这个函数不属于 duration 类。通过这个函数可以对 duration 类对象内部的时钟周期 Period，和周期次数的类型 Rep 进行修改</p>
<p>浮点时长和整数时长间转型能隐式进行无需使用 duration_cast ，其他情况下都需要通过函数进行转换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	chrono::high_resolution_clock::time_point start = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;start:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) </span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;运行中....&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	chrono::high_resolution_clock::time_point end = chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">	<span class="comment">//整数时长：要求 duration_cast</span></span><br><span class="line">	<span class="keyword">auto</span> dt = chrono::<span class="built_in">duration_cast</span>&lt;chrono::milliseconds&gt;(end - start);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;耗时:&quot;</span> &lt;&lt; dt.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//小数时长：不要求 duration_cast</span></span><br><span class="line">	chrono::duration&lt;<span class="type">double</span>, ratio&lt;<span class="number">1</span>, <span class="number">1000</span>&gt;&gt; dms = end - start;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;耗时:&quot;</span> &lt;&lt; dt.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="time-point-cast"><a href="#time-point-cast" class="headerlink" title="time_point_cast"></a>time_point_cast</h6><p>time_point_cast 也是 chrono 库提供的一个模板函数，这个函数不属于 time_point 类。函数的作用是对时间点进行转换，因为不同的时间点对象内部的时钟周期 Period，和周期次数的类型 Rep 可能也是不同的，一般情况下它们之间可以进行隐式类型转换，也可以通过该函数显示的进行转换，函数原型如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Duration&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_ms</span><span class="params">(<span class="type">const</span> chrono::time_point&lt;chrono::high_resolution_clock, Duration&gt;&amp; time_point)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; time_point.<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; ms\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">chrono::time_point&lt;chrono::high_resolution_clock, chrono::milliseconds&gt; <span class="title">time_point_sec</span><span class="params">(chrono::seconds(<span class="number">6</span>))</span></span>;</span><br><span class="line">    <span class="comment">// 无精度损失, 可以进行隐式类型转换</span></span><br><span class="line">    <span class="function">chrono::time_point&lt;chrono::high_resolution_clock, chrono::milliseconds&gt; <span class="title">time_point_ms</span><span class="params">(time_point_sec)</span></span>;</span><br><span class="line">    <span class="built_in">print_ms</span>(time_point_ms);    <span class="comment">// 6000 ms</span></span><br><span class="line"></span><br><span class="line">    time_point_ms = chrono::<span class="built_in">time_point</span>&lt;chrono::high_resolution_clock, chrono::milliseconds&gt;(chrono::<span class="built_in">milliseconds</span>(<span class="number">6789</span>));</span><br><span class="line">    <span class="comment">// error，会损失精度，不允许进行隐式的类型转换</span></span><br><span class="line">    <span class="comment">//chrono::time_point&lt;chrono::high_resolution_clock, chrono::seconds&gt; sec(time_point_ms);</span></span><br><span class="line">    <span class="comment">// 显示类型转换,会损失精度。6789 truncated to 6000</span></span><br><span class="line">    time_point_sec = std::chrono::<span class="built_in">time_point_cast</span>&lt;chrono::seconds&gt;(time_point_ms);</span><br><span class="line">    <span class="built_in">print_ms</span>(time_point_sec); <span class="comment">// 6000 ms</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong>：关于时间点的转换如果没有没有精度的损失可以直接进行隐式类型转换，如果会损失精度只能通过显示类型转换，也就是调用 time_point_cast 函数来完成该操作</p>
<h5 id="C-文件系统filesystem"><a href="#C-文件系统filesystem" class="headerlink" title="C++文件系统filesystem"></a>C++文件系统filesystem</h5><p>filesystem主要用来处理文件目录，也就是文件夹创建和删除，遍历，不是用来读写文件</p>
<h6 id="path类："><a href="#path类：" class="headerlink" title="path类："></a>path类：</h6><p>路径处理</p>
<h6 id="file-status类"><a href="#file-status类" class="headerlink" title="file_status类"></a>file_status类</h6><p>文件状态一些判断</p>
<h6 id="directory-entry类"><a href="#directory-entry类" class="headerlink" title="directory_entry类"></a>directory_entry类</h6><p>文件路口</p>
<h6 id="directory-iterator类"><a href="#directory-iterator类" class="headerlink" title="directory_iterator类"></a>directory_iterator类</h6><p>文件目录的遍历</p>
<p>filesystem中成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断path是否存在  不存在返回false 存在返回true</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">exists</span><span class="params">(file_status stat)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">exists</span><span class="params">(<span class="type">const</span> path&amp; pval)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">exists</span><span class="params">(<span class="type">const</span> path&amp; pval, error_code&amp; ec)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">//构建目录的  只能构建一层目录</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_directory</span><span class="params">(<span class="type">const</span> path&amp; pval)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_directory</span><span class="params">(<span class="type">const</span> path&amp; pval, error_code&amp; ec)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_directory</span><span class="params">(<span class="type">const</span> path&amp; pval, <span class="type">const</span> path&amp; attr)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_directory</span><span class="params">(<span class="type">const</span> path&amp; pval, <span class="type">const</span> path&amp; attr, error_code&amp; ec)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">//构建目录，可以构建 a/b/c 这种目录</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_directories</span><span class="params">(<span class="type">const</span> path&amp; pval)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">create_directories</span><span class="params">(<span class="type">const</span> path&amp; pval, error_code&amp; ec)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2024/06/15/Markdown/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MARKOWN语法使用指南"><a href="#MARKOWN语法使用指南" class="headerlink" title="MARKOWN语法使用指南"></a>MARKOWN语法使用指南</h1><p>Markdown语法使用介绍</p>
<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>一个#加一个空格，就是一级标题&#x2F;&#x2F;快捷键是Ctrl+1（左边键盘的）</p>
<p>两个#加一个空格，就是二级标题&#x2F;&#x2F;快捷键是Ctrl+2  (左边键盘的)</p>
<p>以此类推…..</p>
<p>因此标题前面再按delete可以去除标题效果。</p>
<h2 id="1-2加粗"><a href="#1-2加粗" class="headerlink" title="1.2加粗"></a>1.2加粗</h2><p>使用两个*即可加粗。</p>
<p>比如：<strong>我是你爹</strong></p>
<p>可以让光标移到加粗字附近，就会发现有两个*展开了，按delete依旧可以去除加粗效果。</p>
<h2 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表</h2><p>在每一行的开头使用一个-和一个空格即可完成一个无序列表符号</p>
<ul>
<li>这就是一个无序列表的符号</li>
<li>按下enter自动进行下一个无序列表符号</li>
<li>按两下enter自动把这无序列表取消</li>
</ul>
<p>这一行就取消了无序列表。</p>
<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><p>使用一个&gt;即可进行引用，&gt;必须在每一行开头。</p>
<blockquote>
<p>你妈没了</p>
<p>按两下enter换行就会断开&gt;，也就是断开引用</p>
<blockquote>
<p>可以进行重复引用，没啥软用</p>
</blockquote>
</blockquote>
<h2 id="4-分隔线"><a href="#4-分隔线" class="headerlink" title="4.分隔线"></a>4.分隔线</h2><p>连续使用三个***或者—或者___</p>
<p>比如：</p>
<hr>
<hr>
<hr>
<p>效果都是一样的，建议使用三个***，这个简单。</p>
<hr>
<p>另外这个必须在每一行开头写，不然也是没有用的。</p>
<h2 id="5-链接语法"><a href="#5-链接语法" class="headerlink" title="5.链接语法"></a>5.链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选</p>
<p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p>
<p>对应的HTML代码：<code>&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code></p>
<p>比如[链接语法](<a href="https://markdown.com.cn/basic-syntax/links.html">Markdown 链接语法 | Markdown 官方教程</a>)，这里有三个标题，最后附加链接网址.</p>
<p><a href="https://markdown.com.cn/basic-syntax/links.html">Markdown 链接语法 | Markdown 官方教程</a></p>
<h2 id="6-图片链接"><a href="#6-图片链接" class="headerlink" title="6.图片链接"></a>6.图片链接</h2><p>插入图片Markdown语法代码：<code>![自定义图片名称](图片链接 &quot;图片title&quot;)</code>。“图片title”可有可无。</p>
<p>对应的HTML代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></p>
<p><img src="C:\Users\Han\Desktop\QQ群推广资料\21.png" alt="曼波"></p>
<p>曼波是本地图片，下面风景是网络图片。</p>
<p><img src="https://markdown.com.cn/assets/img/philly-magic-garden.9c0b4415.jpg" alt="111"></p>
<p>如图所示，Markdown能输出本地图片，也能输出网络图片。</p>
<p>Markdown只是引用图片，一旦图片网络位置改变，就显示不了图片了。</p>
<p>建议使用Markdown不要插入图片，使用文本和mermaid语音绘图即可。</p>
<h2 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h2><p>使用中文方括号[],里面加入 ^1,^2,^3……..以此类推。</p>
<p>然后鼠标放到脚注上点击www.什么什么的，就能在文末编辑脚注里面的内容。</p>
<p>比如这是一个脚注1：臭傻逼<a href="%E6%96%87%E6%9C%AB%E6%89%BE%E5%88%B0%E8%84%9A%E6%B3%A8%E7%9A%84%E6%B3%A8%E9%87%8A">^1</a></p>
<p>这是一个脚注2：大傻逼<a href="%E4%B8%8D%E7%82%B9%E5%87%BB%E8%93%9D%E8%89%B2%E7%9A%84www%E5%B0%B1%E4%B8%8D%E8%83%BD%E5%86%99%E6%B3%A8%E9%87%8A%E5%93%A6">^2</a></p>
<p>这是一个不点击蓝色www的脚注，没有脚注注释：烂逼[^3]</p>
<h2 id="8-文字删除线"><a href="#8-文字删除线" class="headerlink" title="8.文字删除线"></a>8.文字删除线</h2><p>使用两个~即可实现删除线：<del>字太丑了</del></p>
<h2 id="9-绘图-树状图"><a href="#9-绘图-树状图" class="headerlink" title="9.绘图-树状图"></a>9.绘图-树状图</h2><p>代码块里面输入以下内容即可生成对应的树状图,语言选择输入mermaid</p>
<p>graph TB;</p>
<p>A1(学习)–&gt;B2(吃饭)</p>
<p>A1(学习)–&gt;B1(打飞机)</p>
<p>B1(打飞机)–&gt;C1(睡觉)</p>
<p>如：（网页可能显示不出来）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">A1(学习)--&gt;B2(吃饭)</span><br><span class="line">A1(学习)--&gt;B1(打飞机)</span><br><span class="line">B1(打飞机)--&gt;C1(冷静)</span><br></pre></td></tr></table></figure>



<h2 id="10-绘制表情"><a href="#10-绘制表情" class="headerlink" title="10.绘制表情"></a>10.绘制表情</h2><p>一些Markdown应用程序允许您通过键入表情符号短代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。必须要使用英文冒号: 111 而不是中文冒号：111，发现没，冒号后面的空位大小不一样，中文冒号后面空位大。</p>
<p>比如：:tent:</p>
<p>:joy:</p>
<p>:black_joker:</p>
<p>:joy_cat:</p>
<h2 id="11-任务列表"><a href="#11-任务列表" class="headerlink" title="11.任务列表"></a>11.任务列表</h2><p>任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号<code>-</code>和方括号<code>[ ]</code>，并在<code>[ ]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加 x 。</p>
<ul>
<li><input disabled="" type="checkbox"> 完成树状图</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">正文里面写这个：</span><br><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br><span class="line">- [ ] Contact the media</span><br><span class="line">每一个字符之间都有空格，-空格[空格]空格,一开始输入-号和空格的时候会生成一个黑点，不用管它，等你输入[ ]之后会自动修正的</span><br><span class="line">显示如下：</span><br></pre></td></tr></table></figure>

<ul>
<li><input checked="" disabled="" type="checkbox"> Write the press release</li>
<li><input disabled="" type="checkbox"> Update the website</li>
<li><input disabled="" type="checkbox"> Contact the media</li>
<li><input checked="" disabled="" type="checkbox"> lowercase checkmark</li>
</ul>
<h2 id="12-字体添加背景颜色"><a href="#12-字体添加背景颜色" class="headerlink" title="12.字体添加背景颜色"></a>12.字体添加背景颜色</h2><p>1.使用两个&#96;     （键盘左边数字1旁边那个键在英文输入法状态下就是这个符号 ）</p>
<p>即可把中间文字添加背景颜色，如<code>丁真：我测你妈~</code></p>
<p>2.使用&lt;&gt;+font color&#x3D;#十六进制颜色代码<font color=#aa8aa>把字体添加颜色</font>改成自己想要的颜色和大小，</p>
<p>在第一部分是&lt;&gt;中输入font color&#x3D;#aa8aa空格size&#x3D;1到9，数字越大字体越大，</p>
<p>第二部分就是你想要改颜色的文字了</p>
<p>第三部分就是&lt;&gt;里面输入&#x2F;font       这样就完成了！</p>
<p>比如：<font color=#088088 size=5>知识改变命运</font></p>
]]></content>
      <categories>
        <category>Markdown</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
